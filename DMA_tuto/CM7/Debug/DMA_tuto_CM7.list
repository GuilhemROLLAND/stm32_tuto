
DMA_tuto_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008580  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008900  08008900  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  08008900  08008900  00009900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008908  08008908  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008908  08008908  00009908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800890c  0800890c  0000990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  08008910  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2400001c  0800892c  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001d8  0800892c  0000a1d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112d0  00000000  00000000  0000a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d8  00000000  00000000  0001b31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0001d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090d  00000000  00000000  0001e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e525  00000000  00000000  0001e9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011981  00000000  00000000  0005ceea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001947ea  00000000  00000000  0006e86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00203055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  00203098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  002060d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008800 	.word	0x08008800

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	08008800 	.word	0x08008800

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b96a 	b.w	80005d4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	460c      	mov	r4, r1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d14e      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000324:	4694      	mov	ip, r2
 8000326:	458c      	cmp	ip, r1
 8000328:	4686      	mov	lr, r0
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	d962      	bls.n	80003f6 <__udivmoddi4+0xde>
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0320 	rsb	r3, r2, #32
 8000336:	4091      	lsls	r1, r2
 8000338:	fa20 f303 	lsr.w	r3, r0, r3
 800033c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000340:	4319      	orrs	r1, r3
 8000342:	fa00 fe02 	lsl.w	lr, r0, r2
 8000346:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034a:	fa1f f68c 	uxth.w	r6, ip
 800034e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	fb07 1114 	mls	r1, r7, r4, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb04 f106 	mul.w	r1, r4, r6
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f104 30ff 	add.w	r0, r4, #4294967295
 800036e:	f080 8112 	bcs.w	8000596 <__udivmoddi4+0x27e>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 810f 	bls.w	8000596 <__udivmoddi4+0x27e>
 8000378:	3c02      	subs	r4, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb1 f0f7 	udiv	r0, r1, r7
 8000386:	fb07 1110 	mls	r1, r7, r0, r1
 800038a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038e:	fb00 f606 	mul.w	r6, r0, r6
 8000392:	429e      	cmp	r6, r3
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x94>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 31ff 	add.w	r1, r0, #4294967295
 800039e:	f080 80fc 	bcs.w	800059a <__udivmoddi4+0x282>
 80003a2:	429e      	cmp	r6, r3
 80003a4:	f240 80f9 	bls.w	800059a <__udivmoddi4+0x282>
 80003a8:	4463      	add	r3, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	1b9b      	subs	r3, r3, r6
 80003ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11d      	cbz	r5, 80003be <__udivmoddi4+0xa6>
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	e9c5 3200 	strd	r3, r2, [r5]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d905      	bls.n	80003d2 <__udivmoddi4+0xba>
 80003c6:	b10d      	cbz	r5, 80003cc <__udivmoddi4+0xb4>
 80003c8:	e9c5 0100 	strd	r0, r1, [r5]
 80003cc:	2100      	movs	r1, #0
 80003ce:	4608      	mov	r0, r1
 80003d0:	e7f5      	b.n	80003be <__udivmoddi4+0xa6>
 80003d2:	fab3 f183 	clz	r1, r3
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d146      	bne.n	8000468 <__udivmoddi4+0x150>
 80003da:	42a3      	cmp	r3, r4
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xcc>
 80003de:	4290      	cmp	r0, r2
 80003e0:	f0c0 80f0 	bcc.w	80005c4 <__udivmoddi4+0x2ac>
 80003e4:	1a86      	subs	r6, r0, r2
 80003e6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d0e6      	beq.n	80003be <__udivmoddi4+0xa6>
 80003f0:	e9c5 6300 	strd	r6, r3, [r5]
 80003f4:	e7e3      	b.n	80003be <__udivmoddi4+0xa6>
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	f040 8090 	bne.w	800051c <__udivmoddi4+0x204>
 80003fc:	eba1 040c 	sub.w	r4, r1, ip
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa1f f78c 	uxth.w	r7, ip
 8000408:	2101      	movs	r1, #1
 800040a:	fbb4 f6f8 	udiv	r6, r4, r8
 800040e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000412:	fb08 4416 	mls	r4, r8, r6, r4
 8000416:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041a:	fb07 f006 	mul.w	r0, r7, r6
 800041e:	4298      	cmp	r0, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x11c>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 34ff 	add.w	r4, r6, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x11a>
 800042c:	4298      	cmp	r0, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 8000432:	4626      	mov	r6, r4
 8000434:	1a1c      	subs	r4, r3, r0
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb4 f0f8 	udiv	r0, r4, r8
 800043e:	fb08 4410 	mls	r4, r8, r0, r4
 8000442:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000446:	fb00 f707 	mul.w	r7, r0, r7
 800044a:	429f      	cmp	r7, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x148>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 34ff 	add.w	r4, r0, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x146>
 8000458:	429f      	cmp	r7, r3
 800045a:	f200 80b0 	bhi.w	80005be <__udivmoddi4+0x2a6>
 800045e:	4620      	mov	r0, r4
 8000460:	1bdb      	subs	r3, r3, r7
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	e7a5      	b.n	80003b4 <__udivmoddi4+0x9c>
 8000468:	f1c1 0620 	rsb	r6, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 f706 	lsr.w	r7, r2, r6
 8000472:	431f      	orrs	r7, r3
 8000474:	fa20 fc06 	lsr.w	ip, r0, r6
 8000478:	fa04 f301 	lsl.w	r3, r4, r1
 800047c:	ea43 030c 	orr.w	r3, r3, ip
 8000480:	40f4      	lsrs	r4, r6
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	0c38      	lsrs	r0, r7, #16
 8000488:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800048c:	fbb4 fef0 	udiv	lr, r4, r0
 8000490:	fa1f fc87 	uxth.w	ip, r7
 8000494:	fb00 441e 	mls	r4, r0, lr, r4
 8000498:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049c:	fb0e f90c 	mul.w	r9, lr, ip
 80004a0:	45a1      	cmp	r9, r4
 80004a2:	fa02 f201 	lsl.w	r2, r2, r1
 80004a6:	d90a      	bls.n	80004be <__udivmoddi4+0x1a6>
 80004a8:	193c      	adds	r4, r7, r4
 80004aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ae:	f080 8084 	bcs.w	80005ba <__udivmoddi4+0x2a2>
 80004b2:	45a1      	cmp	r9, r4
 80004b4:	f240 8081 	bls.w	80005ba <__udivmoddi4+0x2a2>
 80004b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004bc:	443c      	add	r4, r7
 80004be:	eba4 0409 	sub.w	r4, r4, r9
 80004c2:	fa1f f983 	uxth.w	r9, r3
 80004c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ca:	fb00 4413 	mls	r4, r0, r3, r4
 80004ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x1d2>
 80004da:	193c      	adds	r4, r7, r4
 80004dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e0:	d267      	bcs.n	80005b2 <__udivmoddi4+0x29a>
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d965      	bls.n	80005b2 <__udivmoddi4+0x29a>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ee:	fba0 9302 	umull	r9, r3, r0, r2
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	429c      	cmp	r4, r3
 80004f8:	46ce      	mov	lr, r9
 80004fa:	469c      	mov	ip, r3
 80004fc:	d351      	bcc.n	80005a2 <__udivmoddi4+0x28a>
 80004fe:	d04e      	beq.n	800059e <__udivmoddi4+0x286>
 8000500:	b155      	cbz	r5, 8000518 <__udivmoddi4+0x200>
 8000502:	ebb8 030e 	subs.w	r3, r8, lr
 8000506:	eb64 040c 	sbc.w	r4, r4, ip
 800050a:	fa04 f606 	lsl.w	r6, r4, r6
 800050e:	40cb      	lsrs	r3, r1
 8000510:	431e      	orrs	r6, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	e9c5 6400 	strd	r6, r4, [r5]
 8000518:	2100      	movs	r1, #0
 800051a:	e750      	b.n	80003be <__udivmoddi4+0xa6>
 800051c:	f1c2 0320 	rsb	r3, r2, #32
 8000520:	fa20 f103 	lsr.w	r1, r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa24 f303 	lsr.w	r3, r4, r3
 800052c:	4094      	lsls	r4, r2
 800052e:	430c      	orrs	r4, r1
 8000530:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000534:	fa00 fe02 	lsl.w	lr, r0, r2
 8000538:	fa1f f78c 	uxth.w	r7, ip
 800053c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000540:	fb08 3110 	mls	r1, r8, r0, r3
 8000544:	0c23      	lsrs	r3, r4, #16
 8000546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054a:	fb00 f107 	mul.w	r1, r0, r7
 800054e:	4299      	cmp	r1, r3
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x24c>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 36ff 	add.w	r6, r0, #4294967295
 800055a:	d22c      	bcs.n	80005b6 <__udivmoddi4+0x29e>
 800055c:	4299      	cmp	r1, r3
 800055e:	d92a      	bls.n	80005b6 <__udivmoddi4+0x29e>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1a5b      	subs	r3, r3, r1
 8000566:	b2a4      	uxth	r4, r4
 8000568:	fbb3 f1f8 	udiv	r1, r3, r8
 800056c:	fb08 3311 	mls	r3, r8, r1, r3
 8000570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000574:	fb01 f307 	mul.w	r3, r1, r7
 8000578:	42a3      	cmp	r3, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x276>
 800057c:	eb1c 0404 	adds.w	r4, ip, r4
 8000580:	f101 36ff 	add.w	r6, r1, #4294967295
 8000584:	d213      	bcs.n	80005ae <__udivmoddi4+0x296>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d911      	bls.n	80005ae <__udivmoddi4+0x296>
 800058a:	3902      	subs	r1, #2
 800058c:	4464      	add	r4, ip
 800058e:	1ae4      	subs	r4, r4, r3
 8000590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000594:	e739      	b.n	800040a <__udivmoddi4+0xf2>
 8000596:	4604      	mov	r4, r0
 8000598:	e6f0      	b.n	800037c <__udivmoddi4+0x64>
 800059a:	4608      	mov	r0, r1
 800059c:	e706      	b.n	80003ac <__udivmoddi4+0x94>
 800059e:	45c8      	cmp	r8, r9
 80005a0:	d2ae      	bcs.n	8000500 <__udivmoddi4+0x1e8>
 80005a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80005a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80005aa:	3801      	subs	r0, #1
 80005ac:	e7a8      	b.n	8000500 <__udivmoddi4+0x1e8>
 80005ae:	4631      	mov	r1, r6
 80005b0:	e7ed      	b.n	800058e <__udivmoddi4+0x276>
 80005b2:	4603      	mov	r3, r0
 80005b4:	e799      	b.n	80004ea <__udivmoddi4+0x1d2>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e7d4      	b.n	8000564 <__udivmoddi4+0x24c>
 80005ba:	46d6      	mov	lr, sl
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1a6>
 80005be:	4463      	add	r3, ip
 80005c0:	3802      	subs	r0, #2
 80005c2:	e74d      	b.n	8000460 <__udivmoddi4+0x148>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	e70f      	b.n	80003ec <__udivmoddi4+0xd4>
 80005cc:	3e02      	subs	r6, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	e730      	b.n	8000434 <__udivmoddi4+0x11c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <SystemInit+0xfc>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e2:	4a3c      	ldr	r2, [pc, #240]	@ (80006d4 <SystemInit+0xfc>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <SystemInit+0xfc>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a38      	ldr	r2, [pc, #224]	@ (80006d4 <SystemInit+0xfc>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <SystemInit+0x100>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a32      	ldr	r2, [pc, #200]	@ (80006d8 <SystemInit+0x100>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <SystemInit+0x104>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a30      	ldr	r2, [pc, #192]	@ (80006dc <SystemInit+0x104>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <SystemInit+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <SystemInit+0x104>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492c      	ldr	r1, [pc, #176]	@ (80006dc <SystemInit+0x104>)
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <SystemInit+0x108>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <SystemInit+0x100>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <SystemInit+0x100>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemInit+0x104>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <SystemInit+0x104>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemInit+0x104>)
 8000662:	4a20      	ldr	r2, [pc, #128]	@ (80006e4 <SystemInit+0x10c>)
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <SystemInit+0x104>)
 8000668:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <SystemInit+0x110>)
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <SystemInit+0x104>)
 800066e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ec <SystemInit+0x114>)
 8000670:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <SystemInit+0x104>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <SystemInit+0x104>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <SystemInit+0x114>)
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <SystemInit+0x104>)
 8000686:	4a19      	ldr	r2, [pc, #100]	@ (80006ec <SystemInit+0x114>)
 8000688:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <SystemInit+0x104>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <SystemInit+0x104>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <SystemInit+0x104>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <SystemInit+0x118>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <SystemInit+0x118>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <SystemInit+0x11c>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <SystemInit+0x120>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <SystemInit+0x124>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <SystemInit+0x128>)
 80006c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800070e:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000710:	bf00      	nop
 8000712:	4b42      	ldr	r3, [pc, #264]	@ (800081c <main+0x118>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	617a      	str	r2, [r7, #20]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
		;
	if (timeout < 0)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
	{
		Error_Handler();
 800072e:	f000 fa81 	bl	8000c34 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000732:	f000 fb6d 	bl	8000e10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000736:	f000 f887 	bl	8000848 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800073a:	f000 f90b 	bl	8000954 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <main+0x118>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	4a35      	ldr	r2, [pc, #212]	@ (800081c <main+0x118>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074e:	4b33      	ldr	r3, [pc, #204]	@ (800081c <main+0x118>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f003 ff75 	bl	800464c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f003 ff8b 	bl	8004680 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800076e:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000770:	bf00      	nop
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <main+0x118>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x84>
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	617a      	str	r2, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6e>
		;
	if (timeout < 0)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8e>
	{
		Error_Handler();
 800078e:	f000 fa51 	bl	8000c34 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000792:	f000 f9e5 	bl	8000b60 <MX_GPIO_Init>
	MX_DMA_Init();
 8000796:	f000 f959 	bl	8000a4c <MX_DMA_Init>
	MX_USART1_UART_Init();
 800079a:	f000 f90b 	bl	80009b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	// Set callback function for interrupt version DMA1_Stream1
	hdma_memtomem_dma1_stream1.XferCpltCallback = &XferCpltCallback;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <main+0x11c>)
 80007a0:	4a20      	ldr	r2, [pc, #128]	@ (8000824 <main+0x120>)
 80007a2:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Start DMA transfers for polling version DMA1_Stream0
	char *msg_Xfer_start_polling = "Start transfer for polling version\r\n";
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <main+0x124>)
 80007a6:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, (const uint8_t *)msg_Xfer_start_polling, strlen(msg_Xfer_start_polling), 10);
 80007a8:	6938      	ldr	r0, [r7, #16]
 80007aa:	f7ff fd95 	bl	80002d8 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	230a      	movs	r3, #10
 80007b4:	6939      	ldr	r1, [r7, #16]
 80007b6:	481d      	ldr	r0, [pc, #116]	@ (800082c <main+0x128>)
 80007b8:	f006 fedc 	bl	8007574 <HAL_UART_Transmit>
	HAL_DMA_Start(&hdma_memtomem_dma1_stream0, (uint32_t)(Buffer_Src),
 80007bc:	491c      	ldr	r1, [pc, #112]	@ (8000830 <main+0x12c>)
 80007be:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <main+0x130>)
 80007c0:	230a      	movs	r3, #10
 80007c2:	481d      	ldr	r0, [pc, #116]	@ (8000838 <main+0x134>)
 80007c4:	f001 f82e 	bl	8001824 <HAL_DMA_Start>
				  (uint32_t)(Buffer_Dest_Polling), 10);

	// Start DMA transfers for interrupt version DMA1_Stream1
	char *msg_Xfer_start_interrupt = "Start transfer for interrupt version\r\n";
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <main+0x138>)
 80007ca:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (const uint8_t *)msg_Xfer_start_interrupt, strlen(msg_Xfer_start_interrupt), 10);
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f7ff fd83 	bl	80002d8 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	230a      	movs	r3, #10
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <main+0x128>)
 80007dc:	f006 feca 	bl	8007574 <HAL_UART_Transmit>
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_stream1, (uint32_t)Buffer_Src,
 80007e0:	4913      	ldr	r1, [pc, #76]	@ (8000830 <main+0x12c>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <main+0x13c>)
 80007e4:	230a      	movs	r3, #10
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <main+0x11c>)
 80007e8:	f001 f93c 	bl	8001a64 <HAL_DMA_Start_IT>
					 (uint32_t)Buffer_Dest_Interrupt, 10);

	// Wait for the transfer to complete for polling version DMA1_Stream0
	while (HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_stream0,
 80007ec:	e000      	b.n	80007f0 <main+0xec>
								   HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
	{
		__NOP();
 80007ee:	bf00      	nop
	while (HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_stream0,
 80007f0:	2264      	movs	r2, #100	@ 0x64
 80007f2:	2100      	movs	r1, #0
 80007f4:	4810      	ldr	r0, [pc, #64]	@ (8000838 <main+0x134>)
 80007f6:	f001 febd 	bl	8002574 <HAL_DMA_PollForTransfer>
 80007fa:	4603      	mov	r3, r0
								   HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f6      	bne.n	80007ee <main+0xea>
	}
	char *msg_Xfer_complet_polling = "Transfer completed for polling version\r\n";
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <main+0x140>)
 8000802:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (const uint8_t *)msg_Xfer_complet_polling, strlen(msg_Xfer_complet_polling), 10);
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f7ff fd67 	bl	80002d8 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	230a      	movs	r3, #10
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <main+0x128>)
 8000814:	f006 feae 	bl	8007574 <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <main+0x114>
 800081c:	58024400 	.word	0x58024400
 8000820:	24000144 	.word	0x24000144
 8000824:	08000c05 	.word	0x08000c05
 8000828:	08008818 	.word	0x08008818
 800082c:	24000038 	.word	0x24000038
 8000830:	24000008 	.word	0x24000008
 8000834:	240001bc 	.word	0x240001bc
 8000838:	240000cc 	.word	0x240000cc
 800083c:	08008840 	.word	0x08008840
 8000840:	240001c8 	.word	0x240001c8
 8000844:	08008868 	.word	0x08008868

08000848 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f007 ffa6 	bl	80087a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f007 ffa0 	bl	80087a8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000868:	2004      	movs	r0, #4
 800086a:	f003 ff1d 	bl	80046a8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b36      	ldr	r3, [pc, #216]	@ (800094c <SystemClock_Config+0x104>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	4a35      	ldr	r2, [pc, #212]	@ (800094c <SystemClock_Config+0x104>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <SystemClock_Config+0x104>)
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <SystemClock_Config+0x108>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a30      	ldr	r2, [pc, #192]	@ (8000950 <SystemClock_Config+0x108>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <SystemClock_Config+0x108>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80008a0:	bf00      	nop
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <SystemClock_Config+0x108>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ae:	d1f8      	bne.n	80008a2 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80008b0:	230b      	movs	r3, #11
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80008ce:	2305      	movs	r3, #5
 80008d0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 80008d2:	2330      	movs	r3, #48	@ 0x30
 80008d4:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80008da:	2305      	movs	r3, #5
 80008dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008e2:	2308      	movs	r3, #8
 80008e4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 ff32 	bl	800475c <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80008fe:	f000 f999 	bl	8000c34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000902:	233f      	movs	r3, #63	@ 0x3f
 8000904:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fb72 	bl	8005010 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xee>
	{
		Error_Handler();
 8000932:	f000 f97f 	bl	8000c34 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000936:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800093a:	2100      	movs	r1, #0
 800093c:	2000      	movs	r0, #0
 800093e:	f004 fd1d 	bl	800537c <HAL_RCC_MCOConfig>
}
 8000942:	bf00      	nop
 8000944:	3770      	adds	r7, #112	@ 0x70
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	58000400 	.word	0x58000400
 8000950:	58024800 	.word	0x58024800

08000954 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0b2      	sub	sp, #200	@ 0xc8
 8000958:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	22c8      	movs	r2, #200	@ 0xc8
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f007 ff21 	bl	80087a8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000966:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000976:	230c      	movs	r3, #12
 8000978:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000986:	23c0      	movs	r3, #192	@ 0xc0
 8000988:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800098a:	2320      	movs	r3, #32
 800098c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4618      	mov	r0, r3
 800099c:	f004 ff2e 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 80009a6:	f000 f945 	bl	8000c34 <Error_Handler>
	}
}
 80009aa:	bf00      	nop
 80009ac:	37c8      	adds	r7, #200	@ 0xc8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009b8:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	@ (8000a48 <MX_USART1_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 80009fe:	f006 fd69 	bl	80074d4 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8000a08:	f000 f914 	bl	8000c34 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a10:	f007 fdff 	bl	8008612 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000a1a:	f000 f90b 	bl	8000c34 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a22:	f007 fe34 	bl	800868e <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000a2c:	f000 f902 	bl	8000c34 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a32:	f007 fdb5 	bl	80085a0 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000a3c:	f000 f8fa 	bl	8000c34 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000038 	.word	0x24000038
 8000a48:	40011000 	.word	0x40011000

08000a4c <MX_DMA_Init>:
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma1_stream0
 *   hdma_memtomem_dma1_stream1
 */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <MX_DMA_Init+0x100>)
 8000a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a58:	4a3c      	ldr	r2, [pc, #240]	@ (8000b4c <MX_DMA_Init+0x100>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a62:	4b3a      	ldr	r3, [pc, #232]	@ (8000b4c <MX_DMA_Init+0x100>)
 8000a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_stream0 on DMA1_Stream0 */
	hdma_memtomem_dma1_stream0.Instance = DMA1_Stream0;
 8000a70:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a72:	4a38      	ldr	r2, [pc, #224]	@ (8000b54 <MX_DMA_Init+0x108>)
 8000a74:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000a76:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a7c:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a7e:	2280      	movs	r2, #128	@ 0x80
 8000a80:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a82:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a88:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a90:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma1_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_stream0.Init.Mode = DMA_NORMAL;
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma1_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	625a      	str	r2, [r3, #36]	@ 0x24
	hdma_memtomem_dma1_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma_memtomem_dma1_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma_memtomem_dma1_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma1_stream0) != HAL_OK)
 8000ac2:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <MX_DMA_Init+0x104>)
 8000ac4:	f000 fb52 	bl	800116c <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DMA_Init+0x86>
	{
		Error_Handler();
 8000ace:	f000 f8b1 	bl	8000c34 <Error_Handler>
	}

	/* Configure DMA request hdma_memtomem_dma1_stream1 on DMA1_Stream1 */
	hdma_memtomem_dma1_stream1.Instance = DMA1_Stream1;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000ad4:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <MX_DMA_Init+0x110>)
 8000ad6:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_stream1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aea:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af2:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma1_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_stream1.Init.Mode = DMA_NORMAL;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma1_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma1_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
	hdma_memtomem_dma1_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b14:	2203      	movs	r2, #3
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma_memtomem_dma1_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma_memtomem_dma1_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma1_stream1) != HAL_OK)
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <MX_DMA_Init+0x10c>)
 8000b26:	f000 fb21 	bl	800116c <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_DMA_Init+0xe8>
	{
		Error_Handler();
 8000b30:	f000 f880 	bl	8000c34 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f000 fae2 	bl	8001102 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f000 faf9 	bl	8001136 <HAL_NVIC_EnableIRQ>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	240000cc 	.word	0x240000cc
 8000b54:	40020010 	.word	0x40020010
 8000b58:	24000144 	.word	0x24000144
 8000b5c:	40020028 	.word	0x40020028

08000b60 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_GPIO_Init+0x9c>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_GPIO_Init+0xa0>)
 8000bee:	f003 fb7d 	bl	80042ec <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020000 	.word	0x58020000

08000c04 <XferCpltCallback>:

/* USER CODE BEGIN 4 */

// Callback function for interrupt version DMA1_Stream1
void XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	char *msg_Xfer_complet_interrupt = "Transfer completed for interrupt version\r\n";
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <XferCpltCallback+0x28>)
 8000c0e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (const uint8_t *)msg_Xfer_complet_interrupt, strlen(msg_Xfer_complet_interrupt), 10);
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fb61 	bl	80002d8 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <XferCpltCallback+0x2c>)
 8000c20:	f006 fca8 	bl	8007574 <HAL_UART_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08008894 	.word	0x08008894
 8000c30:	24000038 	.word	0x24000038

08000c34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_MspInit+0x30>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4c:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x30>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x30>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	58024400 	.word	0x58024400

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0bc      	sub	sp, #240	@ 0xf0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	22c8      	movs	r2, #200	@ 0xc8
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f007 fd87 	bl	80087a8 <memset>
  if(huart->Instance==USART1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a27      	ldr	r2, [pc, #156]	@ (8000d3c <HAL_UART_MspInit+0xc8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d146      	bne.n	8000d32 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ca4:	f04f 0201 	mov.w	r2, #1
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fd9e 	bl	80057fc <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cc6:	f7ff ffb5 	bl	8000c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d20:	2307      	movs	r3, #7
 8000d22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_UART_MspInit+0xd0>)
 8000d2e:	f003 fadd 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	37f0      	adds	r7, #240	@ 0xf0
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58020000 	.word	0x58020000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f8a9 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_stream1);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <DMA1_Stream1_IRQHandler+0x10>)
 8000dae:	f001 ff8b 	bl	8002cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	24000144 	.word	0x24000144

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fc0a 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f007 fce5 	bl	80087b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fc89 	bl	8000704 <main>
  bx  lr
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dfc:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000e00:	08008910 	.word	0x08008910
  ldr r2, =_sbss
 8000e04:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000e08:	240001d8 	.word	0x240001d8

08000e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC3_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f968 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e1c:	f004 fb18 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	4913      	ldr	r1, [pc, #76]	@ (8000e7c <HAL_Init+0x6c>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_Init+0x68>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <HAL_Init+0x6c>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	4a0b      	ldr	r2, [pc, #44]	@ (8000e80 <HAL_Init+0x70>)
 8000e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e54:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_Init+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f814 	bl	8000e88 <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e002      	b.n	8000e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6a:	f7ff fee9 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	080088c0 	.word	0x080088c0
 8000e80:	24000004 	.word	0x24000004
 8000e84:	24000000 	.word	0x24000000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_InitTick+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e021      	b.n	8000ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_InitTick+0x64>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f94d 	bl	8001152 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f917 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_InitTick+0x68>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000018 	.word	0x24000018
 8000eec:	24000000 	.word	0x24000000
 8000ef0:	24000014 	.word	0x24000014

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	24000018 	.word	0x24000018
 8000f18:	240001d4 	.word	0x240001d4

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	240001d4 	.word	0x240001d4

08000f34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetREVID+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0c1b      	lsrs	r3, r3, #16
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	5c001000 	.word	0x5c001000

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	05fa0000 	.word	0x05fa0000

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff40 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff33 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa4 	bl	80010a8 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fed2 	bl	8000f1c <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e316      	b.n	80017b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a66      	ldr	r2, [pc, #408]	@ (8001324 <HAL_DMA_Init+0x1b8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d04a      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a65      	ldr	r2, [pc, #404]	@ (8001328 <HAL_DMA_Init+0x1bc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d045      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a63      	ldr	r2, [pc, #396]	@ (800132c <HAL_DMA_Init+0x1c0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d040      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a62      	ldr	r2, [pc, #392]	@ (8001330 <HAL_DMA_Init+0x1c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d03b      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a60      	ldr	r2, [pc, #384]	@ (8001334 <HAL_DMA_Init+0x1c8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d036      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001338 <HAL_DMA_Init+0x1cc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d031      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a5d      	ldr	r2, [pc, #372]	@ (800133c <HAL_DMA_Init+0x1d0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02c      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001340 <HAL_DMA_Init+0x1d4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d027      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001344 <HAL_DMA_Init+0x1d8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d022      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a59      	ldr	r2, [pc, #356]	@ (8001348 <HAL_DMA_Init+0x1dc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d01d      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a57      	ldr	r2, [pc, #348]	@ (800134c <HAL_DMA_Init+0x1e0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d018      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a56      	ldr	r2, [pc, #344]	@ (8001350 <HAL_DMA_Init+0x1e4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a54      	ldr	r2, [pc, #336]	@ (8001354 <HAL_DMA_Init+0x1e8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00e      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a53      	ldr	r2, [pc, #332]	@ (8001358 <HAL_DMA_Init+0x1ec>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d009      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a51      	ldr	r2, [pc, #324]	@ (800135c <HAL_DMA_Init+0x1f0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d004      	beq.n	8001224 <HAL_DMA_Init+0xb8>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a50      	ldr	r2, [pc, #320]	@ (8001360 <HAL_DMA_Init+0x1f4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Init+0xbc>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_DMA_Init+0xbe>
 8001228:	2300      	movs	r3, #0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 813b 	beq.w	80014a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a37      	ldr	r2, [pc, #220]	@ (8001324 <HAL_DMA_Init+0x1b8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d04a      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a36      	ldr	r2, [pc, #216]	@ (8001328 <HAL_DMA_Init+0x1bc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d045      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a34      	ldr	r2, [pc, #208]	@ (800132c <HAL_DMA_Init+0x1c0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d040      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a33      	ldr	r2, [pc, #204]	@ (8001330 <HAL_DMA_Init+0x1c4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d03b      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a31      	ldr	r2, [pc, #196]	@ (8001334 <HAL_DMA_Init+0x1c8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d036      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <HAL_DMA_Init+0x1cc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d031      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2e      	ldr	r2, [pc, #184]	@ (800133c <HAL_DMA_Init+0x1d0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02c      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <HAL_DMA_Init+0x1d4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d027      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <HAL_DMA_Init+0x1d8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d022      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <HAL_DMA_Init+0x1dc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d01d      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <HAL_DMA_Init+0x1e0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d018      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <HAL_DMA_Init+0x1e4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a25      	ldr	r2, [pc, #148]	@ (8001354 <HAL_DMA_Init+0x1e8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00e      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a24      	ldr	r2, [pc, #144]	@ (8001358 <HAL_DMA_Init+0x1ec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d009      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a22      	ldr	r2, [pc, #136]	@ (800135c <HAL_DMA_Init+0x1f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_Init+0x174>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <HAL_DMA_Init+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d108      	bne.n	80012f2 <HAL_DMA_Init+0x186>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e007      	b.n	8001302 <HAL_DMA_Init+0x196>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001302:	e02f      	b.n	8001364 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001304:	f7ff fe0a 	bl	8000f1c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b05      	cmp	r3, #5
 8001310:	d928      	bls.n	8001364 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e246      	b.n	80017b2 <HAL_DMA_Init+0x646>
 8001324:	40020010 	.word	0x40020010
 8001328:	40020028 	.word	0x40020028
 800132c:	40020040 	.word	0x40020040
 8001330:	40020058 	.word	0x40020058
 8001334:	40020070 	.word	0x40020070
 8001338:	40020088 	.word	0x40020088
 800133c:	400200a0 	.word	0x400200a0
 8001340:	400200b8 	.word	0x400200b8
 8001344:	40020410 	.word	0x40020410
 8001348:	40020428 	.word	0x40020428
 800134c:	40020440 	.word	0x40020440
 8001350:	40020458 	.word	0x40020458
 8001354:	40020470 	.word	0x40020470
 8001358:	40020488 	.word	0x40020488
 800135c:	400204a0 	.word	0x400204a0
 8001360:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1c8      	bne.n	8001304 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4b83      	ldr	r3, [pc, #524]	@ (800158c <HAL_DMA_Init+0x420>)
 800137e:	4013      	ands	r3, r2
 8001380:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800138a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80013c8:	4b71      	ldr	r3, [pc, #452]	@ (8001590 <HAL_DMA_Init+0x424>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b71      	ldr	r3, [pc, #452]	@ (8001594 <HAL_DMA_Init+0x428>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013d4:	d328      	bcc.n	8001428 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b28      	cmp	r3, #40	@ 0x28
 80013dc:	d903      	bls.n	80013e6 <HAL_DMA_Init+0x27a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80013e4:	d917      	bls.n	8001416 <HAL_DMA_Init+0x2aa>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80013ec:	d903      	bls.n	80013f6 <HAL_DMA_Init+0x28a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b42      	cmp	r3, #66	@ 0x42
 80013f4:	d90f      	bls.n	8001416 <HAL_DMA_Init+0x2aa>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b46      	cmp	r3, #70	@ 0x46
 80013fc:	d903      	bls.n	8001406 <HAL_DMA_Init+0x29a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b48      	cmp	r3, #72	@ 0x48
 8001404:	d907      	bls.n	8001416 <HAL_DMA_Init+0x2aa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b4e      	cmp	r3, #78	@ 0x4e
 800140c:	d905      	bls.n	800141a <HAL_DMA_Init+0x2ae>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b52      	cmp	r3, #82	@ 0x52
 8001414:	d801      	bhi.n	800141a <HAL_DMA_Init+0x2ae>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_DMA_Init+0x2b0>
 800141a:	2300      	movs	r3, #0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001426:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f023 0307 	bic.w	r3, r3, #7
 800143e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	2b04      	cmp	r3, #4
 8001450:	d117      	bne.n	8001482 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f002 fdb7 	bl	8003fd8 <DMA_CheckFifoParam>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2240      	movs	r2, #64	@ 0x40
 8001474:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e197      	b.n	80017b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f002 fcf2 	bl	8003e74 <DMA_CalcBaseAndBitshift>
 8001490:	4603      	mov	r3, r0
 8001492:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	223f      	movs	r2, #63	@ 0x3f
 800149e:	409a      	lsls	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	e0cd      	b.n	8001642 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001598 <HAL_DMA_Init+0x42c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d022      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a39      	ldr	r2, [pc, #228]	@ (800159c <HAL_DMA_Init+0x430>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01d      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a38      	ldr	r2, [pc, #224]	@ (80015a0 <HAL_DMA_Init+0x434>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d018      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a36      	ldr	r2, [pc, #216]	@ (80015a4 <HAL_DMA_Init+0x438>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a35      	ldr	r2, [pc, #212]	@ (80015a8 <HAL_DMA_Init+0x43c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00e      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a33      	ldr	r2, [pc, #204]	@ (80015ac <HAL_DMA_Init+0x440>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d009      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <HAL_DMA_Init+0x444>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d004      	beq.n	80014f6 <HAL_DMA_Init+0x38a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a30      	ldr	r2, [pc, #192]	@ (80015b4 <HAL_DMA_Init+0x448>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Init+0x38e>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_DMA_Init+0x390>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8097 	beq.w	8001630 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a24      	ldr	r2, [pc, #144]	@ (8001598 <HAL_DMA_Init+0x42c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d021      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a22      	ldr	r2, [pc, #136]	@ (800159c <HAL_DMA_Init+0x430>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01c      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <HAL_DMA_Init+0x434>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d017      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <HAL_DMA_Init+0x438>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d012      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1e      	ldr	r2, [pc, #120]	@ (80015a8 <HAL_DMA_Init+0x43c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00d      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <HAL_DMA_Init+0x440>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d008      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1b      	ldr	r2, [pc, #108]	@ (80015b0 <HAL_DMA_Init+0x444>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d003      	beq.n	8001550 <HAL_DMA_Init+0x3e4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <HAL_DMA_Init+0x448>)
 800154e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_DMA_Init+0x44c>)
 800156c:	4013      	ands	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b40      	cmp	r3, #64	@ 0x40
 8001576:	d021      	beq.n	80015bc <HAL_DMA_Init+0x450>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b80      	cmp	r3, #128	@ 0x80
 800157e:	d102      	bne.n	8001586 <HAL_DMA_Init+0x41a>
 8001580:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001584:	e01b      	b.n	80015be <HAL_DMA_Init+0x452>
 8001586:	2300      	movs	r3, #0
 8001588:	e019      	b.n	80015be <HAL_DMA_Init+0x452>
 800158a:	bf00      	nop
 800158c:	fe10803f 	.word	0xfe10803f
 8001590:	5c001000 	.word	0x5c001000
 8001594:	ffff0000 	.word	0xffff0000
 8001598:	58025408 	.word	0x58025408
 800159c:	5802541c 	.word	0x5802541c
 80015a0:	58025430 	.word	0x58025430
 80015a4:	58025444 	.word	0x58025444
 80015a8:	58025458 	.word	0x58025458
 80015ac:	5802546c 	.word	0x5802546c
 80015b0:	58025480 	.word	0x58025480
 80015b4:	58025494 	.word	0x58025494
 80015b8:	fffe000f 	.word	0xfffe000f
 80015bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68d2      	ldr	r2, [r2, #12]
 80015c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b6e      	ldr	r3, [pc, #440]	@ (80017bc <HAL_DMA_Init+0x650>)
 8001604:	4413      	add	r3, r2
 8001606:	4a6e      	ldr	r2, [pc, #440]	@ (80017c0 <HAL_DMA_Init+0x654>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	009a      	lsls	r2, r3, #2
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f002 fc2d 	bl	8003e74 <DMA_CalcBaseAndBitshift>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2201      	movs	r2, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	e008      	b.n	8001642 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0b7      	b.n	80017b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <HAL_DMA_Init+0x658>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d072      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a5d      	ldr	r2, [pc, #372]	@ (80017c8 <HAL_DMA_Init+0x65c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d06d      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5c      	ldr	r2, [pc, #368]	@ (80017cc <HAL_DMA_Init+0x660>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d068      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a5a      	ldr	r2, [pc, #360]	@ (80017d0 <HAL_DMA_Init+0x664>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d063      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a59      	ldr	r2, [pc, #356]	@ (80017d4 <HAL_DMA_Init+0x668>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d05e      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a57      	ldr	r2, [pc, #348]	@ (80017d8 <HAL_DMA_Init+0x66c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d059      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a56      	ldr	r2, [pc, #344]	@ (80017dc <HAL_DMA_Init+0x670>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d054      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a54      	ldr	r2, [pc, #336]	@ (80017e0 <HAL_DMA_Init+0x674>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d04f      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a53      	ldr	r2, [pc, #332]	@ (80017e4 <HAL_DMA_Init+0x678>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04a      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a51      	ldr	r2, [pc, #324]	@ (80017e8 <HAL_DMA_Init+0x67c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d045      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a50      	ldr	r2, [pc, #320]	@ (80017ec <HAL_DMA_Init+0x680>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d040      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	@ (80017f0 <HAL_DMA_Init+0x684>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d03b      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a4d      	ldr	r2, [pc, #308]	@ (80017f4 <HAL_DMA_Init+0x688>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d036      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	@ (80017f8 <HAL_DMA_Init+0x68c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d031      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4a      	ldr	r2, [pc, #296]	@ (80017fc <HAL_DMA_Init+0x690>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d02c      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <HAL_DMA_Init+0x694>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d027      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a47      	ldr	r2, [pc, #284]	@ (8001804 <HAL_DMA_Init+0x698>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a45      	ldr	r2, [pc, #276]	@ (8001808 <HAL_DMA_Init+0x69c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01d      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a44      	ldr	r2, [pc, #272]	@ (800180c <HAL_DMA_Init+0x6a0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d018      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a42      	ldr	r2, [pc, #264]	@ (8001810 <HAL_DMA_Init+0x6a4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a41      	ldr	r2, [pc, #260]	@ (8001814 <HAL_DMA_Init+0x6a8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00e      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a3f      	ldr	r2, [pc, #252]	@ (8001818 <HAL_DMA_Init+0x6ac>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a3e      	ldr	r2, [pc, #248]	@ (800181c <HAL_DMA_Init+0x6b0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d004      	beq.n	8001732 <HAL_DMA_Init+0x5c6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3c      	ldr	r2, [pc, #240]	@ (8001820 <HAL_DMA_Init+0x6b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_DMA_Init+0x5ca>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_DMA_Init+0x5cc>
 8001736:	2300      	movs	r3, #0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d032      	beq.n	80017a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f002 fcc7 	bl	80040d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b80      	cmp	r3, #128	@ 0x80
 8001748:	d102      	bne.n	8001750 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001764:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d010      	beq.n	8001790 <HAL_DMA_Init+0x624>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d80c      	bhi.n	8001790 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f002 fd44 	bl	8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e008      	b.n	80017a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	a7fdabf8 	.word	0xa7fdabf8
 80017c0:	cccccccd 	.word	0xcccccccd
 80017c4:	40020010 	.word	0x40020010
 80017c8:	40020028 	.word	0x40020028
 80017cc:	40020040 	.word	0x40020040
 80017d0:	40020058 	.word	0x40020058
 80017d4:	40020070 	.word	0x40020070
 80017d8:	40020088 	.word	0x40020088
 80017dc:	400200a0 	.word	0x400200a0
 80017e0:	400200b8 	.word	0x400200b8
 80017e4:	40020410 	.word	0x40020410
 80017e8:	40020428 	.word	0x40020428
 80017ec:	40020440 	.word	0x40020440
 80017f0:	40020458 	.word	0x40020458
 80017f4:	40020470 	.word	0x40020470
 80017f8:	40020488 	.word	0x40020488
 80017fc:	400204a0 	.word	0x400204a0
 8001800:	400204b8 	.word	0x400204b8
 8001804:	58025408 	.word	0x58025408
 8001808:	5802541c 	.word	0x5802541c
 800180c:	58025430 	.word	0x58025430
 8001810:	58025444 	.word	0x58025444
 8001814:	58025458 	.word	0x58025458
 8001818:	5802546c 	.word	0x5802546c
 800181c:	58025480 	.word	0x58025480
 8001820:	58025494 	.word	0x58025494

08001824 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0ec      	b.n	8001a1a <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_DMA_Start+0x2a>
 800184a:	2302      	movs	r3, #2
 800184c:	e0e5      	b.n	8001a1a <HAL_DMA_Start+0x1f6>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	f040 80d0 	bne.w	8001a04 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6b      	ldr	r2, [pc, #428]	@ (8001a24 <HAL_DMA_Start+0x200>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04a      	beq.n	8001912 <HAL_DMA_Start+0xee>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a69      	ldr	r2, [pc, #420]	@ (8001a28 <HAL_DMA_Start+0x204>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d045      	beq.n	8001912 <HAL_DMA_Start+0xee>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a68      	ldr	r2, [pc, #416]	@ (8001a2c <HAL_DMA_Start+0x208>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d040      	beq.n	8001912 <HAL_DMA_Start+0xee>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a66      	ldr	r2, [pc, #408]	@ (8001a30 <HAL_DMA_Start+0x20c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d03b      	beq.n	8001912 <HAL_DMA_Start+0xee>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_DMA_Start+0x210>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d036      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a63      	ldr	r2, [pc, #396]	@ (8001a38 <HAL_DMA_Start+0x214>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d031      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a62      	ldr	r2, [pc, #392]	@ (8001a3c <HAL_DMA_Start+0x218>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d02c      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a60      	ldr	r2, [pc, #384]	@ (8001a40 <HAL_DMA_Start+0x21c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d027      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a44 <HAL_DMA_Start+0x220>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <HAL_DMA_Start+0x224>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01d      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5c      	ldr	r2, [pc, #368]	@ (8001a4c <HAL_DMA_Start+0x228>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d018      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a50 <HAL_DMA_Start+0x22c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a59      	ldr	r2, [pc, #356]	@ (8001a54 <HAL_DMA_Start+0x230>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a57      	ldr	r2, [pc, #348]	@ (8001a58 <HAL_DMA_Start+0x234>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_DMA_Start+0xee>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a56      	ldr	r2, [pc, #344]	@ (8001a5c <HAL_DMA_Start+0x238>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d004      	beq.n	8001912 <HAL_DMA_Start+0xee>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a54      	ldr	r2, [pc, #336]	@ (8001a60 <HAL_DMA_Start+0x23c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d108      	bne.n	8001924 <HAL_DMA_Start+0x100>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e007      	b.n	8001934 <HAL_DMA_Start+0x110>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f002 f8ee 	bl	8003b1c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a37      	ldr	r2, [pc, #220]	@ (8001a24 <HAL_DMA_Start+0x200>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d04a      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a36      	ldr	r2, [pc, #216]	@ (8001a28 <HAL_DMA_Start+0x204>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d045      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <HAL_DMA_Start+0x208>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d040      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a33      	ldr	r2, [pc, #204]	@ (8001a30 <HAL_DMA_Start+0x20c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d03b      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a31      	ldr	r2, [pc, #196]	@ (8001a34 <HAL_DMA_Start+0x210>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d036      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a30      	ldr	r2, [pc, #192]	@ (8001a38 <HAL_DMA_Start+0x214>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d031      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2e      	ldr	r2, [pc, #184]	@ (8001a3c <HAL_DMA_Start+0x218>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02c      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <HAL_DMA_Start+0x21c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d027      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <HAL_DMA_Start+0x220>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <HAL_DMA_Start+0x224>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d01d      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_DMA_Start+0x228>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <HAL_DMA_Start+0x22c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a25      	ldr	r2, [pc, #148]	@ (8001a54 <HAL_DMA_Start+0x230>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <HAL_DMA_Start+0x234>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a22      	ldr	r2, [pc, #136]	@ (8001a5c <HAL_DMA_Start+0x238>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_Start+0x1bc>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <HAL_DMA_Start+0x23c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d108      	bne.n	80019f2 <HAL_DMA_Start+0x1ce>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e012      	b.n	8001a18 <HAL_DMA_Start+0x1f4>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e009      	b.n	8001a18 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e226      	b.n	8001ece <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Start_IT+0x2a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e21f      	b.n	8001ece <HAL_DMA_Start_IT+0x46a>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 820a 	bne.w	8001eb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a68      	ldr	r2, [pc, #416]	@ (8001c58 <HAL_DMA_Start_IT+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d04a      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a66      	ldr	r2, [pc, #408]	@ (8001c5c <HAL_DMA_Start_IT+0x1f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d045      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a65      	ldr	r2, [pc, #404]	@ (8001c60 <HAL_DMA_Start_IT+0x1fc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d040      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a63      	ldr	r2, [pc, #396]	@ (8001c64 <HAL_DMA_Start_IT+0x200>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d03b      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a62      	ldr	r2, [pc, #392]	@ (8001c68 <HAL_DMA_Start_IT+0x204>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d036      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a60      	ldr	r2, [pc, #384]	@ (8001c6c <HAL_DMA_Start_IT+0x208>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c70 <HAL_DMA_Start_IT+0x20c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d02c      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	@ (8001c74 <HAL_DMA_Start_IT+0x210>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d027      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5c      	ldr	r2, [pc, #368]	@ (8001c78 <HAL_DMA_Start_IT+0x214>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5a      	ldr	r2, [pc, #360]	@ (8001c7c <HAL_DMA_Start_IT+0x218>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01d      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a59      	ldr	r2, [pc, #356]	@ (8001c80 <HAL_DMA_Start_IT+0x21c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d018      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a57      	ldr	r2, [pc, #348]	@ (8001c84 <HAL_DMA_Start_IT+0x220>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a56      	ldr	r2, [pc, #344]	@ (8001c88 <HAL_DMA_Start_IT+0x224>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00e      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a54      	ldr	r2, [pc, #336]	@ (8001c8c <HAL_DMA_Start_IT+0x228>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a53      	ldr	r2, [pc, #332]	@ (8001c90 <HAL_DMA_Start_IT+0x22c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d004      	beq.n	8001b52 <HAL_DMA_Start_IT+0xee>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	@ (8001c94 <HAL_DMA_Start_IT+0x230>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d108      	bne.n	8001b64 <HAL_DMA_Start_IT+0x100>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_DMA_Start_IT+0x110>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f001 ffce 	bl	8003b1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a34      	ldr	r2, [pc, #208]	@ (8001c58 <HAL_DMA_Start_IT+0x1f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d04a      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a33      	ldr	r2, [pc, #204]	@ (8001c5c <HAL_DMA_Start_IT+0x1f8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d045      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a31      	ldr	r2, [pc, #196]	@ (8001c60 <HAL_DMA_Start_IT+0x1fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d040      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_DMA_Start_IT+0x200>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d03b      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2e      	ldr	r2, [pc, #184]	@ (8001c68 <HAL_DMA_Start_IT+0x204>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d036      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c6c <HAL_DMA_Start_IT+0x208>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d031      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c70 <HAL_DMA_Start_IT+0x20c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02c      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <HAL_DMA_Start_IT+0x210>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d027      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <HAL_DMA_Start_IT+0x214>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d022      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <HAL_DMA_Start_IT+0x218>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01d      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <HAL_DMA_Start_IT+0x21c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a24      	ldr	r2, [pc, #144]	@ (8001c84 <HAL_DMA_Start_IT+0x220>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	@ (8001c88 <HAL_DMA_Start_IT+0x224>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <HAL_DMA_Start_IT+0x228>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <HAL_DMA_Start_IT+0x22c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_DMA_Start_IT+0x1bc>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <HAL_DMA_Start_IT+0x230>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Start_IT+0x1c0>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_DMA_Start_IT+0x1c2>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d036      	beq.n	8001c98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 021e 	bic.w	r2, r3, #30
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0216 	orr.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03e      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0208 	orr.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e035      	b.n	8001cc4 <HAL_DMA_Start_IT+0x260>
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	40020028 	.word	0x40020028
 8001c60:	40020040 	.word	0x40020040
 8001c64:	40020058 	.word	0x40020058
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	40020088 	.word	0x40020088
 8001c70:	400200a0 	.word	0x400200a0
 8001c74:	400200b8 	.word	0x400200b8
 8001c78:	40020410 	.word	0x40020410
 8001c7c:	40020428 	.word	0x40020428
 8001c80:	40020440 	.word	0x40020440
 8001c84:	40020458 	.word	0x40020458
 8001c88:	40020470 	.word	0x40020470
 8001c8c:	40020488 	.word	0x40020488
 8001c90:	400204a0 	.word	0x400204a0
 8001c94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 020e 	bic.w	r2, r3, #14
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 020a 	orr.w	r2, r2, #10
 8001caa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0204 	orr.w	r2, r2, #4
 8001cc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	@ (8001ed8 <HAL_DMA_Start_IT+0x474>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d072      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a82      	ldr	r2, [pc, #520]	@ (8001edc <HAL_DMA_Start_IT+0x478>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d06d      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a80      	ldr	r2, [pc, #512]	@ (8001ee0 <HAL_DMA_Start_IT+0x47c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d068      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee4 <HAL_DMA_Start_IT+0x480>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d063      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee8 <HAL_DMA_Start_IT+0x484>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d05e      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8001eec <HAL_DMA_Start_IT+0x488>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d059      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef0 <HAL_DMA_Start_IT+0x48c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d054      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a79      	ldr	r2, [pc, #484]	@ (8001ef4 <HAL_DMA_Start_IT+0x490>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d04f      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a77      	ldr	r2, [pc, #476]	@ (8001ef8 <HAL_DMA_Start_IT+0x494>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d04a      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a76      	ldr	r2, [pc, #472]	@ (8001efc <HAL_DMA_Start_IT+0x498>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d045      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a74      	ldr	r2, [pc, #464]	@ (8001f00 <HAL_DMA_Start_IT+0x49c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d040      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a73      	ldr	r2, [pc, #460]	@ (8001f04 <HAL_DMA_Start_IT+0x4a0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d03b      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a71      	ldr	r2, [pc, #452]	@ (8001f08 <HAL_DMA_Start_IT+0x4a4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d036      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a70      	ldr	r2, [pc, #448]	@ (8001f0c <HAL_DMA_Start_IT+0x4a8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d031      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	@ (8001f10 <HAL_DMA_Start_IT+0x4ac>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d02c      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f14 <HAL_DMA_Start_IT+0x4b0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d027      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_DMA_Start_IT+0x4b4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d022      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6a      	ldr	r2, [pc, #424]	@ (8001f1c <HAL_DMA_Start_IT+0x4b8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d01d      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a68      	ldr	r2, [pc, #416]	@ (8001f20 <HAL_DMA_Start_IT+0x4bc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d018      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a67      	ldr	r2, [pc, #412]	@ (8001f24 <HAL_DMA_Start_IT+0x4c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a65      	ldr	r2, [pc, #404]	@ (8001f28 <HAL_DMA_Start_IT+0x4c4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00e      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a64      	ldr	r2, [pc, #400]	@ (8001f2c <HAL_DMA_Start_IT+0x4c8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a62      	ldr	r2, [pc, #392]	@ (8001f30 <HAL_DMA_Start_IT+0x4cc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <HAL_DMA_Start_IT+0x350>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a61      	ldr	r2, [pc, #388]	@ (8001f34 <HAL_DMA_Start_IT+0x4d0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_DMA_Start_IT+0x354>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_DMA_Start_IT+0x356>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a37      	ldr	r2, [pc, #220]	@ (8001ed8 <HAL_DMA_Start_IT+0x474>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04a      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a36      	ldr	r2, [pc, #216]	@ (8001edc <HAL_DMA_Start_IT+0x478>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d045      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ee0 <HAL_DMA_Start_IT+0x47c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d040      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a33      	ldr	r2, [pc, #204]	@ (8001ee4 <HAL_DMA_Start_IT+0x480>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d03b      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <HAL_DMA_Start_IT+0x484>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d036      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_DMA_Start_IT+0x488>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d031      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef0 <HAL_DMA_Start_IT+0x48c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02c      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <HAL_DMA_Start_IT+0x490>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d027      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <HAL_DMA_Start_IT+0x494>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2a      	ldr	r2, [pc, #168]	@ (8001efc <HAL_DMA_Start_IT+0x498>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d01d      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	@ (8001f00 <HAL_DMA_Start_IT+0x49c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d018      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <HAL_DMA_Start_IT+0x4a0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_DMA_Start_IT+0x4a4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00e      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <HAL_DMA_Start_IT+0x4a8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d009      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <HAL_DMA_Start_IT+0x4ac>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_Start_IT+0x430>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <HAL_DMA_Start_IT+0x4b0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x442>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e012      	b.n	8001ecc <HAL_DMA_Start_IT+0x468>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e009      	b.n	8001ecc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	58025408 	.word	0x58025408
 8001f1c:	5802541c 	.word	0x5802541c
 8001f20:	58025430 	.word	0x58025430
 8001f24:	58025444 	.word	0x58025444
 8001f28:	58025458 	.word	0x58025458
 8001f2c:	5802546c 	.word	0x5802546c
 8001f30:	58025480 	.word	0x58025480
 8001f34:	58025494 	.word	0x58025494

08001f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7fe ffec 	bl	8000f1c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e2dc      	b.n	800250a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d008      	beq.n	8001f6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e2cd      	b.n	800250a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a76      	ldr	r2, [pc, #472]	@ (800214c <HAL_DMA_Abort+0x214>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d04a      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a74      	ldr	r2, [pc, #464]	@ (8002150 <HAL_DMA_Abort+0x218>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d045      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a73      	ldr	r2, [pc, #460]	@ (8002154 <HAL_DMA_Abort+0x21c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d040      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a71      	ldr	r2, [pc, #452]	@ (8002158 <HAL_DMA_Abort+0x220>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d03b      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a70      	ldr	r2, [pc, #448]	@ (800215c <HAL_DMA_Abort+0x224>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d036      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8002160 <HAL_DMA_Abort+0x228>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d031      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6d      	ldr	r2, [pc, #436]	@ (8002164 <HAL_DMA_Abort+0x22c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d02c      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002168 <HAL_DMA_Abort+0x230>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d027      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800216c <HAL_DMA_Abort+0x234>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d022      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a68      	ldr	r2, [pc, #416]	@ (8002170 <HAL_DMA_Abort+0x238>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a67      	ldr	r2, [pc, #412]	@ (8002174 <HAL_DMA_Abort+0x23c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d018      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a65      	ldr	r2, [pc, #404]	@ (8002178 <HAL_DMA_Abort+0x240>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a64      	ldr	r2, [pc, #400]	@ (800217c <HAL_DMA_Abort+0x244>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00e      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a62      	ldr	r2, [pc, #392]	@ (8002180 <HAL_DMA_Abort+0x248>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a61      	ldr	r2, [pc, #388]	@ (8002184 <HAL_DMA_Abort+0x24c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d004      	beq.n	800200e <HAL_DMA_Abort+0xd6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5f      	ldr	r2, [pc, #380]	@ (8002188 <HAL_DMA_Abort+0x250>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Abort+0xda>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_DMA_Abort+0xdc>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 021e 	bic.w	r2, r2, #30
 8002026:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002036:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00a      	b.n	8002056 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 020e 	bic.w	r2, r2, #14
 800204e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3c      	ldr	r2, [pc, #240]	@ (800214c <HAL_DMA_Abort+0x214>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d072      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <HAL_DMA_Abort+0x218>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d06d      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a39      	ldr	r2, [pc, #228]	@ (8002154 <HAL_DMA_Abort+0x21c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d068      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a37      	ldr	r2, [pc, #220]	@ (8002158 <HAL_DMA_Abort+0x220>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d063      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a36      	ldr	r2, [pc, #216]	@ (800215c <HAL_DMA_Abort+0x224>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d05e      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a34      	ldr	r2, [pc, #208]	@ (8002160 <HAL_DMA_Abort+0x228>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d059      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a33      	ldr	r2, [pc, #204]	@ (8002164 <HAL_DMA_Abort+0x22c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d054      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a31      	ldr	r2, [pc, #196]	@ (8002168 <HAL_DMA_Abort+0x230>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d04f      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a30      	ldr	r2, [pc, #192]	@ (800216c <HAL_DMA_Abort+0x234>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04a      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002170 <HAL_DMA_Abort+0x238>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d045      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_DMA_Abort+0x23c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d040      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <HAL_DMA_Abort+0x240>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d03b      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2a      	ldr	r2, [pc, #168]	@ (800217c <HAL_DMA_Abort+0x244>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d036      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a28      	ldr	r2, [pc, #160]	@ (8002180 <HAL_DMA_Abort+0x248>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d031      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a27      	ldr	r2, [pc, #156]	@ (8002184 <HAL_DMA_Abort+0x24c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d02c      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	@ (8002188 <HAL_DMA_Abort+0x250>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d027      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a24      	ldr	r2, [pc, #144]	@ (800218c <HAL_DMA_Abort+0x254>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <HAL_DMA_Abort+0x258>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01d      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_DMA_Abort+0x25c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d018      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	@ (8002198 <HAL_DMA_Abort+0x260>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1e      	ldr	r2, [pc, #120]	@ (800219c <HAL_DMA_Abort+0x264>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00e      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_DMA_Abort+0x268>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d009      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_DMA_Abort+0x26c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_DMA_Abort+0x20e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	@ (80021a8 <HAL_DMA_Abort+0x270>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d132      	bne.n	80021ac <HAL_DMA_Abort+0x274>
 8002146:	2301      	movs	r3, #1
 8002148:	e031      	b.n	80021ae <HAL_DMA_Abort+0x276>
 800214a:	bf00      	nop
 800214c:	40020010 	.word	0x40020010
 8002150:	40020028 	.word	0x40020028
 8002154:	40020040 	.word	0x40020040
 8002158:	40020058 	.word	0x40020058
 800215c:	40020070 	.word	0x40020070
 8002160:	40020088 	.word	0x40020088
 8002164:	400200a0 	.word	0x400200a0
 8002168:	400200b8 	.word	0x400200b8
 800216c:	40020410 	.word	0x40020410
 8002170:	40020428 	.word	0x40020428
 8002174:	40020440 	.word	0x40020440
 8002178:	40020458 	.word	0x40020458
 800217c:	40020470 	.word	0x40020470
 8002180:	40020488 	.word	0x40020488
 8002184:	400204a0 	.word	0x400204a0
 8002188:	400204b8 	.word	0x400204b8
 800218c:	58025408 	.word	0x58025408
 8002190:	5802541c 	.word	0x5802541c
 8002194:	58025430 	.word	0x58025430
 8002198:	58025444 	.word	0x58025444
 800219c:	58025458 	.word	0x58025458
 80021a0:	5802546c 	.word	0x5802546c
 80021a4:	58025480 	.word	0x58025480
 80021a8:	58025494 	.word	0x58025494
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6d      	ldr	r2, [pc, #436]	@ (800237c <HAL_DMA_Abort+0x444>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04a      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002380 <HAL_DMA_Abort+0x448>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d045      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6a      	ldr	r2, [pc, #424]	@ (8002384 <HAL_DMA_Abort+0x44c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a68      	ldr	r2, [pc, #416]	@ (8002388 <HAL_DMA_Abort+0x450>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d03b      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a67      	ldr	r2, [pc, #412]	@ (800238c <HAL_DMA_Abort+0x454>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d036      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_DMA_Abort+0x458>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d031      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a64      	ldr	r2, [pc, #400]	@ (8002394 <HAL_DMA_Abort+0x45c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d02c      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a62      	ldr	r2, [pc, #392]	@ (8002398 <HAL_DMA_Abort+0x460>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d027      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a61      	ldr	r2, [pc, #388]	@ (800239c <HAL_DMA_Abort+0x464>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d022      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5f      	ldr	r2, [pc, #380]	@ (80023a0 <HAL_DMA_Abort+0x468>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5e      	ldr	r2, [pc, #376]	@ (80023a4 <HAL_DMA_Abort+0x46c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d018      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5c      	ldr	r2, [pc, #368]	@ (80023a8 <HAL_DMA_Abort+0x470>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5b      	ldr	r2, [pc, #364]	@ (80023ac <HAL_DMA_Abort+0x474>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a59      	ldr	r2, [pc, #356]	@ (80023b0 <HAL_DMA_Abort+0x478>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_DMA_Abort+0x47c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_DMA_Abort+0x32a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_DMA_Abort+0x480>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d108      	bne.n	8002274 <HAL_DMA_Abort+0x33c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e007      	b.n	8002284 <HAL_DMA_Abort+0x34c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002284:	e013      	b.n	80022ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002286:	f7fe fe49 	bl	8000f1c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b05      	cmp	r3, #5
 8002292:	d90c      	bls.n	80022ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e12d      	b.n	800250a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1e5      	bne.n	8002286 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_DMA_Abort+0x444>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <HAL_DMA_Abort+0x448>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002384 <HAL_DMA_Abort+0x44c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002388 <HAL_DMA_Abort+0x450>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_DMA_Abort+0x454>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_DMA_Abort+0x458>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_Abort+0x422>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a26      	ldr	r2, [pc, #152]	@ (8002394 <HAL_DMA_Abort+0x45c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <HAL_DMA_Abort+0x460>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_Abort+0x422>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_DMA_Abort+0x464>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a21      	ldr	r2, [pc, #132]	@ (80023a0 <HAL_DMA_Abort+0x468>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_Abort+0x422>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <HAL_DMA_Abort+0x46c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_DMA_Abort+0x470>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_DMA_Abort+0x474>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Abort+0x422>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1b      	ldr	r2, [pc, #108]	@ (80023b0 <HAL_DMA_Abort+0x478>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <HAL_DMA_Abort+0x47c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort+0x422>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_DMA_Abort+0x480>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_DMA_Abort+0x426>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_DMA_Abort+0x428>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02b      	beq.n	80023bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	223f      	movs	r2, #63	@ 0x3f
 8002374:	409a      	lsls	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	e02a      	b.n	80023d2 <HAL_DMA_Abort+0x49a>
 800237c:	40020010 	.word	0x40020010
 8002380:	40020028 	.word	0x40020028
 8002384:	40020040 	.word	0x40020040
 8002388:	40020058 	.word	0x40020058
 800238c:	40020070 	.word	0x40020070
 8002390:	40020088 	.word	0x40020088
 8002394:	400200a0 	.word	0x400200a0
 8002398:	400200b8 	.word	0x400200b8
 800239c:	40020410 	.word	0x40020410
 80023a0:	40020428 	.word	0x40020428
 80023a4:	40020440 	.word	0x40020440
 80023a8:	40020458 	.word	0x40020458
 80023ac:	40020470 	.word	0x40020470
 80023b0:	40020488 	.word	0x40020488
 80023b4:	400204a0 	.word	0x400204a0
 80023b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002514 <HAL_DMA_Abort+0x5dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d072      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_DMA_Abort+0x5e0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d06d      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_DMA_Abort+0x5e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d068      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002520 <HAL_DMA_Abort+0x5e8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d063      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <HAL_DMA_Abort+0x5ec>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d05e      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <HAL_DMA_Abort+0x5f0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d059      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a46      	ldr	r2, [pc, #280]	@ (800252c <HAL_DMA_Abort+0x5f4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d054      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a44      	ldr	r2, [pc, #272]	@ (8002530 <HAL_DMA_Abort+0x5f8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04f      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a43      	ldr	r2, [pc, #268]	@ (8002534 <HAL_DMA_Abort+0x5fc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d04a      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a41      	ldr	r2, [pc, #260]	@ (8002538 <HAL_DMA_Abort+0x600>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d045      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a40      	ldr	r2, [pc, #256]	@ (800253c <HAL_DMA_Abort+0x604>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d040      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3e      	ldr	r2, [pc, #248]	@ (8002540 <HAL_DMA_Abort+0x608>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d03b      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3d      	ldr	r2, [pc, #244]	@ (8002544 <HAL_DMA_Abort+0x60c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d036      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <HAL_DMA_Abort+0x610>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d031      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <HAL_DMA_Abort+0x614>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d02c      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a38      	ldr	r2, [pc, #224]	@ (8002550 <HAL_DMA_Abort+0x618>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d027      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a37      	ldr	r2, [pc, #220]	@ (8002554 <HAL_DMA_Abort+0x61c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <HAL_DMA_Abort+0x620>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01d      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a34      	ldr	r2, [pc, #208]	@ (800255c <HAL_DMA_Abort+0x624>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d018      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a32      	ldr	r2, [pc, #200]	@ (8002560 <HAL_DMA_Abort+0x628>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a31      	ldr	r2, [pc, #196]	@ (8002564 <HAL_DMA_Abort+0x62c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002568 <HAL_DMA_Abort+0x630>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2e      	ldr	r2, [pc, #184]	@ (800256c <HAL_DMA_Abort+0x634>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <HAL_DMA_Abort+0x58a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002570 <HAL_DMA_Abort+0x638>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Abort+0x58e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_DMA_Abort+0x590>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40020010 	.word	0x40020010
 8002518:	40020028 	.word	0x40020028
 800251c:	40020040 	.word	0x40020040
 8002520:	40020058 	.word	0x40020058
 8002524:	40020070 	.word	0x40020070
 8002528:	40020088 	.word	0x40020088
 800252c:	400200a0 	.word	0x400200a0
 8002530:	400200b8 	.word	0x400200b8
 8002534:	40020410 	.word	0x40020410
 8002538:	40020428 	.word	0x40020428
 800253c:	40020440 	.word	0x40020440
 8002540:	40020458 	.word	0x40020458
 8002544:	40020470 	.word	0x40020470
 8002548:	40020488 	.word	0x40020488
 800254c:	400204a0 	.word	0x400204a0
 8002550:	400204b8 	.word	0x400204b8
 8002554:	58025408 	.word	0x58025408
 8002558:	5802541c 	.word	0x5802541c
 800255c:	58025430 	.word	0x58025430
 8002560:	58025444 	.word	0x58025444
 8002564:	58025458 	.word	0x58025458
 8002568:	5802546c 	.word	0x5802546c
 800256c:	58025480 	.word	0x58025480
 8002570:	58025494 	.word	0x58025494

08002574 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	460b      	mov	r3, r1
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8002586:	f7fe fcc9 	bl	8000f1c <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e374      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d008      	beq.n	80025b4 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e365      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7b      	ldr	r2, [pc, #492]	@ (80027a8 <HAL_DMA_PollForTransfer+0x234>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	@ (80027ac <HAL_DMA_PollForTransfer+0x238>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a78      	ldr	r2, [pc, #480]	@ (80027b0 <HAL_DMA_PollForTransfer+0x23c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a77      	ldr	r2, [pc, #476]	@ (80027b4 <HAL_DMA_PollForTransfer+0x240>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a75      	ldr	r2, [pc, #468]	@ (80027b8 <HAL_DMA_PollForTransfer+0x244>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a74      	ldr	r2, [pc, #464]	@ (80027bc <HAL_DMA_PollForTransfer+0x248>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a72      	ldr	r2, [pc, #456]	@ (80027c0 <HAL_DMA_PollForTransfer+0x24c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	@ (80027c4 <HAL_DMA_PollForTransfer+0x250>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6f      	ldr	r2, [pc, #444]	@ (80027c8 <HAL_DMA_PollForTransfer+0x254>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6e      	ldr	r2, [pc, #440]	@ (80027cc <HAL_DMA_PollForTransfer+0x258>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6c      	ldr	r2, [pc, #432]	@ (80027d0 <HAL_DMA_PollForTransfer+0x25c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6b      	ldr	r2, [pc, #428]	@ (80027d4 <HAL_DMA_PollForTransfer+0x260>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a69      	ldr	r2, [pc, #420]	@ (80027d8 <HAL_DMA_PollForTransfer+0x264>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a68      	ldr	r2, [pc, #416]	@ (80027dc <HAL_DMA_PollForTransfer+0x268>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a66      	ldr	r2, [pc, #408]	@ (80027e0 <HAL_DMA_PollForTransfer+0x26c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_PollForTransfer+0xe0>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_DMA_PollForTransfer+0x270>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_PollForTransfer+0xe4>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_PollForTransfer+0xe6>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e303      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2220      	movs	r2, #32
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
 800268e:	e007      	b.n	80026a0 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2210      	movs	r2, #16
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	3308      	adds	r3, #8
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e1d5      	b.n	8002a5c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e2da      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2202      	movs	r2, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e0:	e007      	b.n	80026f2 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2204      	movs	r2, #4
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	3304      	adds	r3, #4
 80026fe:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8002700:	e1ac      	b.n	8002a5c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a28      	ldr	r2, [pc, #160]	@ (80027a8 <HAL_DMA_PollForTransfer+0x234>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d04a      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a26      	ldr	r2, [pc, #152]	@ (80027ac <HAL_DMA_PollForTransfer+0x238>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d045      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a25      	ldr	r2, [pc, #148]	@ (80027b0 <HAL_DMA_PollForTransfer+0x23c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d040      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a23      	ldr	r2, [pc, #140]	@ (80027b4 <HAL_DMA_PollForTransfer+0x240>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d03b      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <HAL_DMA_PollForTransfer+0x244>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d036      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <HAL_DMA_PollForTransfer+0x248>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d031      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <HAL_DMA_PollForTransfer+0x24c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d02c      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_DMA_PollForTransfer+0x250>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d027      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <HAL_DMA_PollForTransfer+0x254>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <HAL_DMA_PollForTransfer+0x258>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01d      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <HAL_DMA_PollForTransfer+0x25c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d018      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a17      	ldr	r2, [pc, #92]	@ (80027d4 <HAL_DMA_PollForTransfer+0x260>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	@ (80027d8 <HAL_DMA_PollForTransfer+0x264>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00e      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_DMA_PollForTransfer+0x268>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_DMA_PollForTransfer+0x26c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_DMA_PollForTransfer+0x22e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	@ (80027e4 <HAL_DMA_PollForTransfer+0x270>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d122      	bne.n	80027e8 <HAL_DMA_PollForTransfer+0x274>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e021      	b.n	80027ea <HAL_DMA_PollForTransfer+0x276>
 80027a6:	bf00      	nop
 80027a8:	40020010 	.word	0x40020010
 80027ac:	40020028 	.word	0x40020028
 80027b0:	40020040 	.word	0x40020040
 80027b4:	40020058 	.word	0x40020058
 80027b8:	40020070 	.word	0x40020070
 80027bc:	40020088 	.word	0x40020088
 80027c0:	400200a0 	.word	0x400200a0
 80027c4:	400200b8 	.word	0x400200b8
 80027c8:	40020410 	.word	0x40020410
 80027cc:	40020428 	.word	0x40020428
 80027d0:	40020440 	.word	0x40020440
 80027d4:	40020458 	.word	0x40020458
 80027d8:	40020470 	.word	0x40020470
 80027dc:	40020488 	.word	0x40020488
 80027e0:	400204a0 	.word	0x400204a0
 80027e4:	400204b8 	.word	0x400204b8
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d057      	beq.n	800289e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2201      	movs	r2, #1
 800281c:	409a      	lsls	r2, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2104      	movs	r1, #4
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2204      	movs	r2, #4
 8002850:	409a      	lsls	r2, r3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2108      	movs	r1, #8
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d038      	beq.n	80028e0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1f0      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2108      	movs	r1, #8
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2201      	movs	r2, #1
 80028c0:	409a      	lsls	r2, r3
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e1cf      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d012      	beq.n	800290e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80028e8:	f7fe fb18 	bl	8000f1c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <HAL_DMA_PollForTransfer+0x38a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7ff fb17 	bl	8001f38 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1b8      	b.n	8002c80 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a81      	ldr	r2, [pc, #516]	@ (8002b18 <HAL_DMA_PollForTransfer+0x5a4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d072      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b1c <HAL_DMA_PollForTransfer+0x5a8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d06d      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7e      	ldr	r2, [pc, #504]	@ (8002b20 <HAL_DMA_PollForTransfer+0x5ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d068      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <HAL_DMA_PollForTransfer+0x5b0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d063      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b28 <HAL_DMA_PollForTransfer+0x5b4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d05e      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a79      	ldr	r2, [pc, #484]	@ (8002b2c <HAL_DMA_PollForTransfer+0x5b8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d059      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a78      	ldr	r2, [pc, #480]	@ (8002b30 <HAL_DMA_PollForTransfer+0x5bc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d054      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a76      	ldr	r2, [pc, #472]	@ (8002b34 <HAL_DMA_PollForTransfer+0x5c0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04f      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a75      	ldr	r2, [pc, #468]	@ (8002b38 <HAL_DMA_PollForTransfer+0x5c4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d04a      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a73      	ldr	r2, [pc, #460]	@ (8002b3c <HAL_DMA_PollForTransfer+0x5c8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d045      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	@ (8002b40 <HAL_DMA_PollForTransfer+0x5cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d040      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a70      	ldr	r2, [pc, #448]	@ (8002b44 <HAL_DMA_PollForTransfer+0x5d0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d03b      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_DMA_PollForTransfer+0x5d4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d036      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6d      	ldr	r2, [pc, #436]	@ (8002b4c <HAL_DMA_PollForTransfer+0x5d8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6c      	ldr	r2, [pc, #432]	@ (8002b50 <HAL_DMA_PollForTransfer+0x5dc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d02c      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b54 <HAL_DMA_PollForTransfer+0x5e0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d027      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a69      	ldr	r2, [pc, #420]	@ (8002b58 <HAL_DMA_PollForTransfer+0x5e4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a67      	ldr	r2, [pc, #412]	@ (8002b5c <HAL_DMA_PollForTransfer+0x5e8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01d      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a66      	ldr	r2, [pc, #408]	@ (8002b60 <HAL_DMA_PollForTransfer+0x5ec>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a64      	ldr	r2, [pc, #400]	@ (8002b64 <HAL_DMA_PollForTransfer+0x5f0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a63      	ldr	r2, [pc, #396]	@ (8002b68 <HAL_DMA_PollForTransfer+0x5f4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a61      	ldr	r2, [pc, #388]	@ (8002b6c <HAL_DMA_PollForTransfer+0x5f8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a60      	ldr	r2, [pc, #384]	@ (8002b70 <HAL_DMA_PollForTransfer+0x5fc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_DMA_PollForTransfer+0x48a>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <HAL_DMA_PollForTransfer+0x600>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_DMA_PollForTransfer+0x48e>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_DMA_PollForTransfer+0x490>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d029      	beq.n	8002a5c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a28:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a4e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f43f ae4c 	beq.w	8002702 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 80a0 	bne.w	8002bb2 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a28      	ldr	r2, [pc, #160]	@ (8002b18 <HAL_DMA_PollForTransfer+0x5a4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04a      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a26      	ldr	r2, [pc, #152]	@ (8002b1c <HAL_DMA_PollForTransfer+0x5a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d045      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a25      	ldr	r2, [pc, #148]	@ (8002b20 <HAL_DMA_PollForTransfer+0x5ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d040      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <HAL_DMA_PollForTransfer+0x5b0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d03b      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <HAL_DMA_PollForTransfer+0x5b4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d036      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <HAL_DMA_PollForTransfer+0x5b8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_DMA_PollForTransfer+0x5bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d02c      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_DMA_PollForTransfer+0x5c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d027      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_DMA_PollForTransfer+0x5c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b3c <HAL_DMA_PollForTransfer+0x5c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_DMA_PollForTransfer+0x5cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <HAL_DMA_PollForTransfer+0x5d0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <HAL_DMA_PollForTransfer+0x5d4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <HAL_DMA_PollForTransfer+0x5d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <HAL_DMA_PollForTransfer+0x5dc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_DMA_PollForTransfer+0x59e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <HAL_DMA_PollForTransfer+0x5e0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d132      	bne.n	8002b78 <HAL_DMA_PollForTransfer+0x604>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e031      	b.n	8002b7a <HAL_DMA_PollForTransfer+0x606>
 8002b16:	bf00      	nop
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
 8002b58:	58025408 	.word	0x58025408
 8002b5c:	5802541c 	.word	0x5802541c
 8002b60:	58025430 	.word	0x58025430
 8002b64:	58025444 	.word	0x58025444
 8002b68:	58025458 	.word	0x58025458
 8002b6c:	5802546c 	.word	0x5802546c
 8002b70:	58025480 	.word	0x58025480
 8002b74:	58025494 	.word	0x58025494
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2230      	movs	r2, #48	@ 0x30
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2202      	movs	r2, #2
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002bb0:	e065      	b.n	8002c7e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a34      	ldr	r2, [pc, #208]	@ (8002c88 <HAL_DMA_PollForTransfer+0x714>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a32      	ldr	r2, [pc, #200]	@ (8002c8c <HAL_DMA_PollForTransfer+0x718>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a31      	ldr	r2, [pc, #196]	@ (8002c90 <HAL_DMA_PollForTransfer+0x71c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c94 <HAL_DMA_PollForTransfer+0x720>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2e      	ldr	r2, [pc, #184]	@ (8002c98 <HAL_DMA_PollForTransfer+0x724>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <HAL_DMA_PollForTransfer+0x728>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <HAL_DMA_PollForTransfer+0x72c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ca4 <HAL_DMA_PollForTransfer+0x730>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <HAL_DMA_PollForTransfer+0x734>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a26      	ldr	r2, [pc, #152]	@ (8002cac <HAL_DMA_PollForTransfer+0x738>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	@ (8002cb0 <HAL_DMA_PollForTransfer+0x73c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a23      	ldr	r2, [pc, #140]	@ (8002cb4 <HAL_DMA_PollForTransfer+0x740>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	@ (8002cb8 <HAL_DMA_PollForTransfer+0x744>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <HAL_DMA_PollForTransfer+0x748>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc0 <HAL_DMA_PollForTransfer+0x74c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_PollForTransfer+0x6de>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_DMA_PollForTransfer+0x750>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_PollForTransfer+0x6e2>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_DMA_PollForTransfer+0x6e4>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2210      	movs	r2, #16
 8002c66:	409a      	lsls	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e007      	b.n	8002c7e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2204      	movs	r2, #4
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8002c7e:	7efb      	ldrb	r3, [r7, #27]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3728      	adds	r7, #40	@ 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40020010 	.word	0x40020010
 8002c8c:	40020028 	.word	0x40020028
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40020058 	.word	0x40020058
 8002c98:	40020070 	.word	0x40020070
 8002c9c:	40020088 	.word	0x40020088
 8002ca0:	400200a0 	.word	0x400200a0
 8002ca4:	400200b8 	.word	0x400200b8
 8002ca8:	40020410 	.word	0x40020410
 8002cac:	40020428 	.word	0x40020428
 8002cb0:	40020440 	.word	0x40020440
 8002cb4:	40020458 	.word	0x40020458
 8002cb8:	40020470 	.word	0x40020470
 8002cbc:	40020488 	.word	0x40020488
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	400204b8 	.word	0x400204b8

08002cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cd4:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_DMA_IRQHandler+0x1ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a67      	ldr	r2, [pc, #412]	@ (8002e78 <HAL_DMA_IRQHandler+0x1b0>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5f      	ldr	r2, [pc, #380]	@ (8002e7c <HAL_DMA_IRQHandler+0x1b4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5d      	ldr	r2, [pc, #372]	@ (8002e80 <HAL_DMA_IRQHandler+0x1b8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5c      	ldr	r2, [pc, #368]	@ (8002e84 <HAL_DMA_IRQHandler+0x1bc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e88 <HAL_DMA_IRQHandler+0x1c0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a59      	ldr	r2, [pc, #356]	@ (8002e8c <HAL_DMA_IRQHandler+0x1c4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a57      	ldr	r2, [pc, #348]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a56      	ldr	r2, [pc, #344]	@ (8002e94 <HAL_DMA_IRQHandler+0x1cc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_DMA_IRQHandler+0x1d0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a53      	ldr	r2, [pc, #332]	@ (8002e9c <HAL_DMA_IRQHandler+0x1d4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a51      	ldr	r2, [pc, #324]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_DMA_IRQHandler+0x1e4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xd2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a48      	ldr	r2, [pc, #288]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_IRQHandler+0xd6>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_DMA_IRQHandler+0xd8>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 842b 	beq.w	80035fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2208      	movs	r2, #8
 8002db0:	409a      	lsls	r2, r3
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80a2 	beq.w	8002f00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e7c <HAL_DMA_IRQHandler+0x1b4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d04a      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2d      	ldr	r2, [pc, #180]	@ (8002e80 <HAL_DMA_IRQHandler+0x1b8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d045      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_DMA_IRQHandler+0x1bc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d040      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <HAL_DMA_IRQHandler+0x1c0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d03b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <HAL_DMA_IRQHandler+0x1c4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d036      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d031      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a25      	ldr	r2, [pc, #148]	@ (8002e94 <HAL_DMA_IRQHandler+0x1cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <HAL_DMA_IRQHandler+0x1d0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d027      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <HAL_DMA_IRQHandler+0x1d4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d022      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d01d      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d018      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_DMA_IRQHandler+0x1e4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00e      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x194>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12f      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x1f4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e02e      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x208>
 8002e72:	bf00      	nop
 8002e74:	24000000 	.word	0x24000000
 8002e78:	1b4e81b5 	.word	0x1b4e81b5
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2208      	movs	r2, #8
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06e      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a69      	ldr	r2, [pc, #420]	@ (80030c0 <HAL_DMA_IRQHandler+0x3f8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d04a      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a67      	ldr	r2, [pc, #412]	@ (80030c4 <HAL_DMA_IRQHandler+0x3fc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d045      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a66      	ldr	r2, [pc, #408]	@ (80030c8 <HAL_DMA_IRQHandler+0x400>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d040      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a64      	ldr	r2, [pc, #400]	@ (80030cc <HAL_DMA_IRQHandler+0x404>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d03b      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a63      	ldr	r2, [pc, #396]	@ (80030d0 <HAL_DMA_IRQHandler+0x408>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d036      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a61      	ldr	r2, [pc, #388]	@ (80030d4 <HAL_DMA_IRQHandler+0x40c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d031      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a60      	ldr	r2, [pc, #384]	@ (80030d8 <HAL_DMA_IRQHandler+0x410>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d02c      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5e      	ldr	r2, [pc, #376]	@ (80030dc <HAL_DMA_IRQHandler+0x414>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d027      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_DMA_IRQHandler+0x418>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5b      	ldr	r2, [pc, #364]	@ (80030e4 <HAL_DMA_IRQHandler+0x41c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01d      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_DMA_IRQHandler+0x420>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d018      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_DMA_IRQHandler+0x424>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_DMA_IRQHandler+0x428>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00e      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_DMA_IRQHandler+0x42c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_DMA_IRQHandler+0x430>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2ee>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_DMA_IRQHandler+0x434>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10a      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x304>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e003      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x30c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0202 	orr.w	r2, r3, #2
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	409a      	lsls	r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 808f 	beq.w	8003128 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2c      	ldr	r2, [pc, #176]	@ (80030c0 <HAL_DMA_IRQHandler+0x3f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2a      	ldr	r2, [pc, #168]	@ (80030c4 <HAL_DMA_IRQHandler+0x3fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a29      	ldr	r2, [pc, #164]	@ (80030c8 <HAL_DMA_IRQHandler+0x400>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a27      	ldr	r2, [pc, #156]	@ (80030cc <HAL_DMA_IRQHandler+0x404>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a26      	ldr	r2, [pc, #152]	@ (80030d0 <HAL_DMA_IRQHandler+0x408>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <HAL_DMA_IRQHandler+0x40c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <HAL_DMA_IRQHandler+0x410>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <HAL_DMA_IRQHandler+0x414>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <HAL_DMA_IRQHandler+0x418>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	@ (80030e4 <HAL_DMA_IRQHandler+0x41c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1d      	ldr	r2, [pc, #116]	@ (80030e8 <HAL_DMA_IRQHandler+0x420>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1b      	ldr	r2, [pc, #108]	@ (80030ec <HAL_DMA_IRQHandler+0x424>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <HAL_DMA_IRQHandler+0x428>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	@ (80030f4 <HAL_DMA_IRQHandler+0x42c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <HAL_DMA_IRQHandler+0x430>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_IRQHandler+0x3e2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a15      	ldr	r2, [pc, #84]	@ (80030fc <HAL_DMA_IRQHandler+0x434>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d12a      	bne.n	8003100 <HAL_DMA_IRQHandler+0x438>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e023      	b.n	8003108 <HAL_DMA_IRQHandler+0x440>
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2204      	movs	r2, #4
 8003116:	409a      	lsls	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2210      	movs	r2, #16
 8003132:	409a      	lsls	r2, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a6 	beq.w	800328a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a85      	ldr	r2, [pc, #532]	@ (8003358 <HAL_DMA_IRQHandler+0x690>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a83      	ldr	r2, [pc, #524]	@ (800335c <HAL_DMA_IRQHandler+0x694>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a82      	ldr	r2, [pc, #520]	@ (8003360 <HAL_DMA_IRQHandler+0x698>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a80      	ldr	r2, [pc, #512]	@ (8003364 <HAL_DMA_IRQHandler+0x69c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7f      	ldr	r2, [pc, #508]	@ (8003368 <HAL_DMA_IRQHandler+0x6a0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7d      	ldr	r2, [pc, #500]	@ (800336c <HAL_DMA_IRQHandler+0x6a4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7c      	ldr	r2, [pc, #496]	@ (8003370 <HAL_DMA_IRQHandler+0x6a8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7a      	ldr	r2, [pc, #488]	@ (8003374 <HAL_DMA_IRQHandler+0x6ac>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a79      	ldr	r2, [pc, #484]	@ (8003378 <HAL_DMA_IRQHandler+0x6b0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a77      	ldr	r2, [pc, #476]	@ (800337c <HAL_DMA_IRQHandler+0x6b4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a76      	ldr	r2, [pc, #472]	@ (8003380 <HAL_DMA_IRQHandler+0x6b8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a74      	ldr	r2, [pc, #464]	@ (8003384 <HAL_DMA_IRQHandler+0x6bc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a73      	ldr	r2, [pc, #460]	@ (8003388 <HAL_DMA_IRQHandler+0x6c0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a71      	ldr	r2, [pc, #452]	@ (800338c <HAL_DMA_IRQHandler+0x6c4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a70      	ldr	r2, [pc, #448]	@ (8003390 <HAL_DMA_IRQHandler+0x6c8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_IRQHandler+0x516>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003394 <HAL_DMA_IRQHandler+0x6cc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10a      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x52c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e009      	b.n	8003208 <HAL_DMA_IRQHandler+0x540>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d03e      	beq.n	800328a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2210      	movs	r2, #16
 8003216:	409a      	lsls	r2, r3
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d024      	beq.n	800328a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e01f      	b.n	800328a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01b      	beq.n	800328a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
 800325a:	e016      	b.n	800328a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2220      	movs	r2, #32
 8003294:	409a      	lsls	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8110 	beq.w	80034c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <HAL_DMA_IRQHandler+0x690>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <HAL_DMA_IRQHandler+0x694>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a29      	ldr	r2, [pc, #164]	@ (8003360 <HAL_DMA_IRQHandler+0x698>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a28      	ldr	r2, [pc, #160]	@ (8003364 <HAL_DMA_IRQHandler+0x69c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <HAL_DMA_IRQHandler+0x6a0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a25      	ldr	r2, [pc, #148]	@ (800336c <HAL_DMA_IRQHandler+0x6a4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a23      	ldr	r2, [pc, #140]	@ (8003370 <HAL_DMA_IRQHandler+0x6a8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <HAL_DMA_IRQHandler+0x6ac>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <HAL_DMA_IRQHandler+0x6b0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1f      	ldr	r2, [pc, #124]	@ (800337c <HAL_DMA_IRQHandler+0x6b4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <HAL_DMA_IRQHandler+0x6b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <HAL_DMA_IRQHandler+0x6bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_DMA_IRQHandler+0x6c0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_DMA_IRQHandler+0x6c4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_DMA_IRQHandler+0x6c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_DMA_IRQHandler+0x678>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a16      	ldr	r2, [pc, #88]	@ (8003394 <HAL_DMA_IRQHandler+0x6cc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d12b      	bne.n	8003398 <HAL_DMA_IRQHandler+0x6d0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e02a      	b.n	80033ac <HAL_DMA_IRQHandler+0x6e4>
 8003356:	bf00      	nop
 8003358:	40020010 	.word	0x40020010
 800335c:	40020028 	.word	0x40020028
 8003360:	40020040 	.word	0x40020040
 8003364:	40020058 	.word	0x40020058
 8003368:	40020070 	.word	0x40020070
 800336c:	40020088 	.word	0x40020088
 8003370:	400200a0 	.word	0x400200a0
 8003374:	400200b8 	.word	0x400200b8
 8003378:	40020410 	.word	0x40020410
 800337c:	40020428 	.word	0x40020428
 8003380:	40020440 	.word	0x40020440
 8003384:	40020458 	.word	0x40020458
 8003388:	40020470 	.word	0x40020470
 800338c:	40020488 	.word	0x40020488
 8003390:	400204a0 	.word	0x400204a0
 8003394:	400204b8 	.word	0x400204b8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8087 	beq.w	80034c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2220      	movs	r2, #32
 80033bc:	409a      	lsls	r2, r3
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d139      	bne.n	8003442 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0216 	bic.w	r2, r2, #22
 80033dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_DMA_IRQHandler+0x736>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	223f      	movs	r2, #63	@ 0x3f
 8003418:	409a      	lsls	r2, r3
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 834a 	beq.w	8003acc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
          }
          return;
 8003440:	e344      	b.n	8003acc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d018      	beq.n	8003482 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02c      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
 800346e:	e027      	b.n	80034c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d023      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
 8003480:	e01e      	b.n	80034c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0210 	bic.w	r2, r2, #16
 800349e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8306 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8088 	beq.w	80035e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7a      	ldr	r2, [pc, #488]	@ (80036d0 <HAL_DMA_IRQHandler+0xa08>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04a      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a79      	ldr	r2, [pc, #484]	@ (80036d4 <HAL_DMA_IRQHandler+0xa0c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d045      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a77      	ldr	r2, [pc, #476]	@ (80036d8 <HAL_DMA_IRQHandler+0xa10>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d040      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a76      	ldr	r2, [pc, #472]	@ (80036dc <HAL_DMA_IRQHandler+0xa14>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d03b      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a74      	ldr	r2, [pc, #464]	@ (80036e0 <HAL_DMA_IRQHandler+0xa18>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d036      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a73      	ldr	r2, [pc, #460]	@ (80036e4 <HAL_DMA_IRQHandler+0xa1c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d031      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a71      	ldr	r2, [pc, #452]	@ (80036e8 <HAL_DMA_IRQHandler+0xa20>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02c      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a70      	ldr	r2, [pc, #448]	@ (80036ec <HAL_DMA_IRQHandler+0xa24>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d027      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6e      	ldr	r2, [pc, #440]	@ (80036f0 <HAL_DMA_IRQHandler+0xa28>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6d      	ldr	r2, [pc, #436]	@ (80036f4 <HAL_DMA_IRQHandler+0xa2c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01d      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6b      	ldr	r2, [pc, #428]	@ (80036f8 <HAL_DMA_IRQHandler+0xa30>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6a      	ldr	r2, [pc, #424]	@ (80036fc <HAL_DMA_IRQHandler+0xa34>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_DMA_IRQHandler+0xa38>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a67      	ldr	r2, [pc, #412]	@ (8003704 <HAL_DMA_IRQHandler+0xa3c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a65      	ldr	r2, [pc, #404]	@ (8003708 <HAL_DMA_IRQHandler+0xa40>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_DMA_IRQHandler+0x8b8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a64      	ldr	r2, [pc, #400]	@ (800370c <HAL_DMA_IRQHandler+0xa44>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <HAL_DMA_IRQHandler+0x8ca>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <HAL_DMA_IRQHandler+0x8da>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d307      	bcc.n	80035be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f2      	bne.n	80035a2 <HAL_DMA_IRQHandler+0x8da>
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035d6:	e003      	b.n	80035e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8272 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
 80035fa:	e26c      	b.n	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a43      	ldr	r2, [pc, #268]	@ (8003710 <HAL_DMA_IRQHandler+0xa48>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a42      	ldr	r2, [pc, #264]	@ (8003714 <HAL_DMA_IRQHandler+0xa4c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a40      	ldr	r2, [pc, #256]	@ (8003718 <HAL_DMA_IRQHandler+0xa50>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3f      	ldr	r2, [pc, #252]	@ (800371c <HAL_DMA_IRQHandler+0xa54>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3d      	ldr	r2, [pc, #244]	@ (8003720 <HAL_DMA_IRQHandler+0xa58>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3c      	ldr	r2, [pc, #240]	@ (8003724 <HAL_DMA_IRQHandler+0xa5c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3a      	ldr	r2, [pc, #232]	@ (8003728 <HAL_DMA_IRQHandler+0xa60>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_DMA_IRQHandler+0x984>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a39      	ldr	r2, [pc, #228]	@ (800372c <HAL_DMA_IRQHandler+0xa64>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_DMA_IRQHandler+0x988>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_DMA_IRQHandler+0x98a>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 823f 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2204      	movs	r2, #4
 800366a:	409a      	lsls	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80cd 	beq.w	8003810 <HAL_DMA_IRQHandler+0xb48>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80c7 	beq.w	8003810 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2204      	movs	r2, #4
 800368c:	409a      	lsls	r2, r3
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d049      	beq.n	8003730 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8210 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b8:	e20a      	b.n	8003ad0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8206 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036cc:	e200      	b.n	8003ad0 <HAL_DMA_IRQHandler+0xe08>
 80036ce:	bf00      	nop
 80036d0:	40020010 	.word	0x40020010
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40020040 	.word	0x40020040
 80036dc:	40020058 	.word	0x40020058
 80036e0:	40020070 	.word	0x40020070
 80036e4:	40020088 	.word	0x40020088
 80036e8:	400200a0 	.word	0x400200a0
 80036ec:	400200b8 	.word	0x400200b8
 80036f0:	40020410 	.word	0x40020410
 80036f4:	40020428 	.word	0x40020428
 80036f8:	40020440 	.word	0x40020440
 80036fc:	40020458 	.word	0x40020458
 8003700:	40020470 	.word	0x40020470
 8003704:	40020488 	.word	0x40020488
 8003708:	400204a0 	.word	0x400204a0
 800370c:	400204b8 	.word	0x400204b8
 8003710:	58025408 	.word	0x58025408
 8003714:	5802541c 	.word	0x5802541c
 8003718:	58025430 	.word	0x58025430
 800371c:	58025444 	.word	0x58025444
 8003720:	58025458 	.word	0x58025458
 8003724:	5802546c 	.word	0x5802546c
 8003728:	58025480 	.word	0x58025480
 800372c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d160      	bne.n	80037fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7f      	ldr	r2, [pc, #508]	@ (800393c <HAL_DMA_IRQHandler+0xc74>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04a      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7d      	ldr	r2, [pc, #500]	@ (8003940 <HAL_DMA_IRQHandler+0xc78>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d045      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7c      	ldr	r2, [pc, #496]	@ (8003944 <HAL_DMA_IRQHandler+0xc7c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d040      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a7a      	ldr	r2, [pc, #488]	@ (8003948 <HAL_DMA_IRQHandler+0xc80>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d03b      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a79      	ldr	r2, [pc, #484]	@ (800394c <HAL_DMA_IRQHandler+0xc84>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d036      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a77      	ldr	r2, [pc, #476]	@ (8003950 <HAL_DMA_IRQHandler+0xc88>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a76      	ldr	r2, [pc, #472]	@ (8003954 <HAL_DMA_IRQHandler+0xc8c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d02c      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a74      	ldr	r2, [pc, #464]	@ (8003958 <HAL_DMA_IRQHandler+0xc90>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d027      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a73      	ldr	r2, [pc, #460]	@ (800395c <HAL_DMA_IRQHandler+0xc94>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a71      	ldr	r2, [pc, #452]	@ (8003960 <HAL_DMA_IRQHandler+0xc98>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a70      	ldr	r2, [pc, #448]	@ (8003964 <HAL_DMA_IRQHandler+0xc9c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003968 <HAL_DMA_IRQHandler+0xca0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6d      	ldr	r2, [pc, #436]	@ (800396c <HAL_DMA_IRQHandler+0xca4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003970 <HAL_DMA_IRQHandler+0xca8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003974 <HAL_DMA_IRQHandler+0xcac>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0xb12>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	@ (8003978 <HAL_DMA_IRQHandler+0xcb0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <HAL_DMA_IRQHandler+0xb24>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0208 	bic.w	r2, r2, #8
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <HAL_DMA_IRQHandler+0xb34>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8165 	beq.w	8003ad0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380e:	e15f      	b.n	8003ad0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2202      	movs	r2, #2
 800381a:	409a      	lsls	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80c5 	beq.w	80039b0 <HAL_DMA_IRQHandler+0xce8>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80bf 	beq.w	80039b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2202      	movs	r2, #2
 800383c:	409a      	lsls	r2, r3
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d018      	beq.n	800387e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 813a 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003868:	e134      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8130 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387c:	e12a      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8089 	bne.w	800399c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2b      	ldr	r2, [pc, #172]	@ (800393c <HAL_DMA_IRQHandler+0xc74>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_DMA_IRQHandler+0xc78>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a28      	ldr	r2, [pc, #160]	@ (8003944 <HAL_DMA_IRQHandler+0xc7c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a26      	ldr	r2, [pc, #152]	@ (8003948 <HAL_DMA_IRQHandler+0xc80>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a25      	ldr	r2, [pc, #148]	@ (800394c <HAL_DMA_IRQHandler+0xc84>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a23      	ldr	r2, [pc, #140]	@ (8003950 <HAL_DMA_IRQHandler+0xc88>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a22      	ldr	r2, [pc, #136]	@ (8003954 <HAL_DMA_IRQHandler+0xc8c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <HAL_DMA_IRQHandler+0xc90>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_DMA_IRQHandler+0xc94>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_DMA_IRQHandler+0xc98>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003964 <HAL_DMA_IRQHandler+0xc9c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <HAL_DMA_IRQHandler+0xca0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a19      	ldr	r2, [pc, #100]	@ (800396c <HAL_DMA_IRQHandler+0xca4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <HAL_DMA_IRQHandler+0xca8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <HAL_DMA_IRQHandler+0xcac>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_IRQHandler+0xc62>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <HAL_DMA_IRQHandler+0xcb0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d128      	bne.n	800397c <HAL_DMA_IRQHandler+0xcb4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0214 	bic.w	r2, r2, #20
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e027      	b.n	800398c <HAL_DMA_IRQHandler+0xcc4>
 800393c:	40020010 	.word	0x40020010
 8003940:	40020028 	.word	0x40020028
 8003944:	40020040 	.word	0x40020040
 8003948:	40020058 	.word	0x40020058
 800394c:	40020070 	.word	0x40020070
 8003950:	40020088 	.word	0x40020088
 8003954:	400200a0 	.word	0x400200a0
 8003958:	400200b8 	.word	0x400200b8
 800395c:	40020410 	.word	0x40020410
 8003960:	40020428 	.word	0x40020428
 8003964:	40020440 	.word	0x40020440
 8003968:	40020458 	.word	0x40020458
 800396c:	40020470 	.word	0x40020470
 8003970:	40020488 	.word	0x40020488
 8003974:	400204a0 	.word	0x400204a0
 8003978:	400204b8 	.word	0x400204b8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 020a 	bic.w	r2, r2, #10
 800398a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8097 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ae:	e091      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2208      	movs	r2, #8
 80039ba:	409a      	lsls	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8088 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8082 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a41      	ldr	r2, [pc, #260]	@ (8003adc <HAL_DMA_IRQHandler+0xe14>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae0 <HAL_DMA_IRQHandler+0xe18>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ae4 <HAL_DMA_IRQHandler+0xe1c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae8 <HAL_DMA_IRQHandler+0xe20>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a3b      	ldr	r2, [pc, #236]	@ (8003aec <HAL_DMA_IRQHandler+0xe24>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a39      	ldr	r2, [pc, #228]	@ (8003af0 <HAL_DMA_IRQHandler+0xe28>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a38      	ldr	r2, [pc, #224]	@ (8003af4 <HAL_DMA_IRQHandler+0xe2c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a36      	ldr	r2, [pc, #216]	@ (8003af8 <HAL_DMA_IRQHandler+0xe30>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a35      	ldr	r2, [pc, #212]	@ (8003afc <HAL_DMA_IRQHandler+0xe34>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a33      	ldr	r2, [pc, #204]	@ (8003b00 <HAL_DMA_IRQHandler+0xe38>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	@ (8003b04 <HAL_DMA_IRQHandler+0xe3c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_DMA_IRQHandler+0xe40>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <HAL_DMA_IRQHandler+0xe44>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <HAL_DMA_IRQHandler+0xe48>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2c      	ldr	r2, [pc, #176]	@ (8003b14 <HAL_DMA_IRQHandler+0xe4c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xdaa>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003b18 <HAL_DMA_IRQHandler+0xe50>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xdbc>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 021c 	bic.w	r2, r2, #28
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e007      	b.n	8003a94 <HAL_DMA_IRQHandler+0xdcc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020e 	bic.w	r2, r2, #14
 8003a92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
 8003aca:	e004      	b.n	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003acc:	bf00      	nop
 8003ace:	e002      	b.n	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ad6:	3728      	adds	r7, #40	@ 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40020010 	.word	0x40020010
 8003ae0:	40020028 	.word	0x40020028
 8003ae4:	40020040 	.word	0x40020040
 8003ae8:	40020058 	.word	0x40020058
 8003aec:	40020070 	.word	0x40020070
 8003af0:	40020088 	.word	0x40020088
 8003af4:	400200a0 	.word	0x400200a0
 8003af8:	400200b8 	.word	0x400200b8
 8003afc:	40020410 	.word	0x40020410
 8003b00:	40020428 	.word	0x40020428
 8003b04:	40020440 	.word	0x40020440
 8003b08:	40020458 	.word	0x40020458
 8003b0c:	40020470 	.word	0x40020470
 8003b10:	40020488 	.word	0x40020488
 8003b14:	400204a0 	.word	0x400204a0
 8003b18:	400204b8 	.word	0x400204b8

08003b1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d38 <DMA_SetConfig+0x21c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d072      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7d      	ldr	r2, [pc, #500]	@ (8003d3c <DMA_SetConfig+0x220>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d06d      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d40 <DMA_SetConfig+0x224>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d068      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7a      	ldr	r2, [pc, #488]	@ (8003d44 <DMA_SetConfig+0x228>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d063      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a79      	ldr	r2, [pc, #484]	@ (8003d48 <DMA_SetConfig+0x22c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d05e      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a77      	ldr	r2, [pc, #476]	@ (8003d4c <DMA_SetConfig+0x230>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d059      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a76      	ldr	r2, [pc, #472]	@ (8003d50 <DMA_SetConfig+0x234>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d054      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a74      	ldr	r2, [pc, #464]	@ (8003d54 <DMA_SetConfig+0x238>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04f      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a73      	ldr	r2, [pc, #460]	@ (8003d58 <DMA_SetConfig+0x23c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a71      	ldr	r2, [pc, #452]	@ (8003d5c <DMA_SetConfig+0x240>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a70      	ldr	r2, [pc, #448]	@ (8003d60 <DMA_SetConfig+0x244>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d64 <DMA_SetConfig+0x248>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6d      	ldr	r2, [pc, #436]	@ (8003d68 <DMA_SetConfig+0x24c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d6c <DMA_SetConfig+0x250>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d70 <DMA_SetConfig+0x254>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a68      	ldr	r2, [pc, #416]	@ (8003d74 <DMA_SetConfig+0x258>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a67      	ldr	r2, [pc, #412]	@ (8003d78 <DMA_SetConfig+0x25c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <DMA_SetConfig+0x260>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a64      	ldr	r2, [pc, #400]	@ (8003d80 <DMA_SetConfig+0x264>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a62      	ldr	r2, [pc, #392]	@ (8003d84 <DMA_SetConfig+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a61      	ldr	r2, [pc, #388]	@ (8003d88 <DMA_SetConfig+0x26c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8003d8c <DMA_SetConfig+0x270>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5e      	ldr	r2, [pc, #376]	@ (8003d90 <DMA_SetConfig+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <DMA_SetConfig+0x10a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5c      	ldr	r2, [pc, #368]	@ (8003d94 <DMA_SetConfig+0x278>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <DMA_SetConfig+0x10e>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <DMA_SetConfig+0x110>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a39      	ldr	r2, [pc, #228]	@ (8003d38 <DMA_SetConfig+0x21c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04a      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a38      	ldr	r2, [pc, #224]	@ (8003d3c <DMA_SetConfig+0x220>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d045      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a36      	ldr	r2, [pc, #216]	@ (8003d40 <DMA_SetConfig+0x224>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a35      	ldr	r2, [pc, #212]	@ (8003d44 <DMA_SetConfig+0x228>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d03b      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a33      	ldr	r2, [pc, #204]	@ (8003d48 <DMA_SetConfig+0x22c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d036      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <DMA_SetConfig+0x230>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d031      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <DMA_SetConfig+0x234>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	@ (8003d54 <DMA_SetConfig+0x238>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d027      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <DMA_SetConfig+0x23c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <DMA_SetConfig+0x240>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <DMA_SetConfig+0x244>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	@ (8003d64 <DMA_SetConfig+0x248>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <DMA_SetConfig+0x24c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	@ (8003d6c <DMA_SetConfig+0x250>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <DMA_SetConfig+0x254>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <DMA_SetConfig+0x1d0>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <DMA_SetConfig+0x258>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <DMA_SetConfig+0x1d4>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <DMA_SetConfig+0x1d6>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d059      	beq.n	8003daa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	223f      	movs	r2, #63	@ 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d138      	bne.n	8003d98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d36:	e086      	b.n	8003e46 <DMA_SetConfig+0x32a>
 8003d38:	40020010 	.word	0x40020010
 8003d3c:	40020028 	.word	0x40020028
 8003d40:	40020040 	.word	0x40020040
 8003d44:	40020058 	.word	0x40020058
 8003d48:	40020070 	.word	0x40020070
 8003d4c:	40020088 	.word	0x40020088
 8003d50:	400200a0 	.word	0x400200a0
 8003d54:	400200b8 	.word	0x400200b8
 8003d58:	40020410 	.word	0x40020410
 8003d5c:	40020428 	.word	0x40020428
 8003d60:	40020440 	.word	0x40020440
 8003d64:	40020458 	.word	0x40020458
 8003d68:	40020470 	.word	0x40020470
 8003d6c:	40020488 	.word	0x40020488
 8003d70:	400204a0 	.word	0x400204a0
 8003d74:	400204b8 	.word	0x400204b8
 8003d78:	58025408 	.word	0x58025408
 8003d7c:	5802541c 	.word	0x5802541c
 8003d80:	58025430 	.word	0x58025430
 8003d84:	58025444 	.word	0x58025444
 8003d88:	58025458 	.word	0x58025458
 8003d8c:	5802546c 	.word	0x5802546c
 8003d90:	58025480 	.word	0x58025480
 8003d94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
}
 8003da8:	e04d      	b.n	8003e46 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a29      	ldr	r2, [pc, #164]	@ (8003e54 <DMA_SetConfig+0x338>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a27      	ldr	r2, [pc, #156]	@ (8003e58 <DMA_SetConfig+0x33c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <DMA_SetConfig+0x340>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d018      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <DMA_SetConfig+0x344>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a23      	ldr	r2, [pc, #140]	@ (8003e64 <DMA_SetConfig+0x348>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <DMA_SetConfig+0x34c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a20      	ldr	r2, [pc, #128]	@ (8003e6c <DMA_SetConfig+0x350>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <DMA_SetConfig+0x2de>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e70 <DMA_SetConfig+0x354>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <DMA_SetConfig+0x2e2>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <DMA_SetConfig+0x2e4>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d108      	bne.n	8003e36 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	60da      	str	r2, [r3, #12]
}
 8003e34:	e007      	b.n	8003e46 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	60da      	str	r2, [r3, #12]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494

08003e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a42      	ldr	r2, [pc, #264]	@ (8003f8c <DMA_CalcBaseAndBitshift+0x118>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d04a      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a41      	ldr	r2, [pc, #260]	@ (8003f90 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d045      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a3f      	ldr	r2, [pc, #252]	@ (8003f94 <DMA_CalcBaseAndBitshift+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d040      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f98 <DMA_CalcBaseAndBitshift+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d03b      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8003f9c <DMA_CalcBaseAndBitshift+0x128>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d036      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d031      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a39      	ldr	r2, [pc, #228]	@ (8003fa4 <DMA_CalcBaseAndBitshift+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02c      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d027      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a36      	ldr	r2, [pc, #216]	@ (8003fac <DMA_CalcBaseAndBitshift+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a35      	ldr	r2, [pc, #212]	@ (8003fb0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a33      	ldr	r2, [pc, #204]	@ (8003fb4 <DMA_CalcBaseAndBitshift+0x140>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <DMA_CalcBaseAndBitshift+0x144>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <DMA_CalcBaseAndBitshift+0x148>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <DMA_CalcBaseAndBitshift+0x150>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <DMA_CalcBaseAndBitshift+0xa8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x154>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <DMA_CalcBaseAndBitshift+0xac>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <DMA_CalcBaseAndBitshift+0xae>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b10      	subs	r3, #16
 8003f2e:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x158>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f40:	5cd3      	ldrb	r3, [r2, r3]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d908      	bls.n	8003f60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f5e:	e00d      	b.n	8003f7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6e:	e005      	b.n	8003f7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40020010 	.word	0x40020010
 8003f90:	40020028 	.word	0x40020028
 8003f94:	40020040 	.word	0x40020040
 8003f98:	40020058 	.word	0x40020058
 8003f9c:	40020070 	.word	0x40020070
 8003fa0:	40020088 	.word	0x40020088
 8003fa4:	400200a0 	.word	0x400200a0
 8003fa8:	400200b8 	.word	0x400200b8
 8003fac:	40020410 	.word	0x40020410
 8003fb0:	40020428 	.word	0x40020428
 8003fb4:	40020440 	.word	0x40020440
 8003fb8:	40020458 	.word	0x40020458
 8003fbc:	40020470 	.word	0x40020470
 8003fc0:	40020488 	.word	0x40020488
 8003fc4:	400204a0 	.word	0x400204a0
 8003fc8:	400204b8 	.word	0x400204b8
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	080088d0 	.word	0x080088d0
 8003fd4:	fffffc00 	.word	0xfffffc00

08003fd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d120      	bne.n	800402e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d858      	bhi.n	80040a6 <DMA_CheckFifoParam+0xce>
 8003ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <DMA_CheckFifoParam+0x24>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800401f 	.word	0x0800401f
 8004004:	0800400d 	.word	0x0800400d
 8004008:	080040a7 	.word	0x080040a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d048      	beq.n	80040aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800401c:	e045      	b.n	80040aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004026:	d142      	bne.n	80040ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800402c:	e03f      	b.n	80040ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004036:	d123      	bne.n	8004080 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	2b03      	cmp	r3, #3
 800403e:	d838      	bhi.n	80040b2 <DMA_CheckFifoParam+0xda>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <DMA_CheckFifoParam+0x70>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004059 	.word	0x08004059
 800404c:	0800405f 	.word	0x0800405f
 8004050:	08004059 	.word	0x08004059
 8004054:	08004071 	.word	0x08004071
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
        break;
 800405c:	e030      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d025      	beq.n	80040b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800406e:	e022      	b.n	80040b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004078:	d11f      	bne.n	80040ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800407e:	e01c      	b.n	80040ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	2b02      	cmp	r3, #2
 8004086:	d902      	bls.n	800408e <DMA_CheckFifoParam+0xb6>
 8004088:	2b03      	cmp	r3, #3
 800408a:	d003      	beq.n	8004094 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800408c:	e018      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
        break;
 8004092:	e015      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
    break;
 80040a4:	e00b      	b.n	80040be <DMA_CheckFifoParam+0xe6>
        break;
 80040a6:	bf00      	nop
 80040a8:	e00a      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        break;
 80040aa:	bf00      	nop
 80040ac:	e008      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ae:	bf00      	nop
 80040b0:	e006      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <DMA_CheckFifoParam+0xe8>
    break;
 80040be:	bf00      	nop
    }
  }

  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a38      	ldr	r2, [pc, #224]	@ (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a36      	ldr	r2, [pc, #216]	@ (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a35      	ldr	r2, [pc, #212]	@ (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a32      	ldr	r2, [pc, #200]	@ (80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2f      	ldr	r2, [pc, #188]	@ (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	3b08      	subs	r3, #8
 8004140:	4a28      	ldr	r2, [pc, #160]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800415c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800416c:	e024      	b.n	80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	3b10      	subs	r3, #16
 8004176:	4a1e      	ldr	r2, [pc, #120]	@ (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d806      	bhi.n	8004196 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d902      	bls.n	8004196 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3308      	adds	r3, #8
 8004194:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494
 80041e4:	cccccccd 	.word	0xcccccccd
 80041e8:	16009600 	.word	0x16009600
 80041ec:	58025880 	.word	0x58025880
 80041f0:	aaaaaaab 	.word	0xaaaaaaab
 80041f4:	400204b8 	.word	0x400204b8
 80041f8:	4002040f 	.word	0x4002040f
 80041fc:	10008200 	.word	0x10008200
 8004200:	40020880 	.word	0x40020880

08004204 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04a      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d847      	bhi.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a25      	ldr	r2, [pc, #148]	@ (80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a24      	ldr	r2, [pc, #144]	@ (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a21      	ldr	r2, [pc, #132]	@ (80042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800428c:	671a      	str	r2, [r3, #112]	@ 0x70
 800428e:	e009      	b.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	58025408 	.word	0x58025408
 80042c0:	5802541c 	.word	0x5802541c
 80042c4:	58025430 	.word	0x58025430
 80042c8:	58025444 	.word	0x58025444
 80042cc:	58025458 	.word	0x58025458
 80042d0:	5802546c 	.word	0x5802546c
 80042d4:	58025480 	.word	0x58025480
 80042d8:	58025494 	.word	0x58025494
 80042dc:	1600963f 	.word	0x1600963f
 80042e0:	58025940 	.word	0x58025940
 80042e4:	1000823f 	.word	0x1000823f
 80042e8:	40020940 	.word	0x40020940

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	@ 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042fa:	4b89      	ldr	r3, [pc, #548]	@ (8004520 <HAL_GPIO_Init+0x234>)
 80042fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042fe:	e194      	b.n	800462a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2101      	movs	r1, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8186 	beq.w	8004624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d005      	beq.n	8004330 <HAL_GPIO_Init+0x44>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d130      	bne.n	8004392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004366:	2201      	movs	r2, #1
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0201 	and.w	r2, r3, #1
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d017      	beq.n	80043ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d123      	bne.n	8004422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	08da      	lsrs	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3208      	adds	r2, #8
 80043e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	2203      	movs	r2, #3
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80e0 	beq.w	8004624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004464:	4b2f      	ldr	r3, [pc, #188]	@ (8004524 <HAL_GPIO_Init+0x238>)
 8004466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800446a:	4a2e      	ldr	r2, [pc, #184]	@ (8004524 <HAL_GPIO_Init+0x238>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004474:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_GPIO_Init+0x238>)
 8004476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004482:	4a29      	ldr	r2, [pc, #164]	@ (8004528 <HAL_GPIO_Init+0x23c>)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	3302      	adds	r3, #2
 800448a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	220f      	movs	r2, #15
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a20      	ldr	r2, [pc, #128]	@ (800452c <HAL_GPIO_Init+0x240>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d052      	beq.n	8004554 <HAL_GPIO_Init+0x268>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004530 <HAL_GPIO_Init+0x244>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d031      	beq.n	800451a <HAL_GPIO_Init+0x22e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004534 <HAL_GPIO_Init+0x248>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02b      	beq.n	8004516 <HAL_GPIO_Init+0x22a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004538 <HAL_GPIO_Init+0x24c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d025      	beq.n	8004512 <HAL_GPIO_Init+0x226>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <HAL_GPIO_Init+0x250>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <HAL_GPIO_Init+0x222>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <HAL_GPIO_Init+0x254>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d019      	beq.n	800450a <HAL_GPIO_Init+0x21e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004544 <HAL_GPIO_Init+0x258>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x21a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_GPIO_Init+0x25c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x216>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a18      	ldr	r2, [pc, #96]	@ (800454c <HAL_GPIO_Init+0x260>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x212>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a17      	ldr	r2, [pc, #92]	@ (8004550 <HAL_GPIO_Init+0x264>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x20e>
 80044f6:	2309      	movs	r3, #9
 80044f8:	e02d      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 80044fa:	230a      	movs	r3, #10
 80044fc:	e02b      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 80044fe:	2308      	movs	r3, #8
 8004500:	e029      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 8004502:	2307      	movs	r3, #7
 8004504:	e027      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 8004506:	2306      	movs	r3, #6
 8004508:	e025      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 800450a:	2305      	movs	r3, #5
 800450c:	e023      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 800450e:	2304      	movs	r3, #4
 8004510:	e021      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 8004512:	2303      	movs	r3, #3
 8004514:	e01f      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 8004516:	2302      	movs	r3, #2
 8004518:	e01d      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 800451a:	2301      	movs	r3, #1
 800451c:	e01b      	b.n	8004556 <HAL_GPIO_Init+0x26a>
 800451e:	bf00      	nop
 8004520:	58000080 	.word	0x58000080
 8004524:	58024400 	.word	0x58024400
 8004528:	58000400 	.word	0x58000400
 800452c:	58020000 	.word	0x58020000
 8004530:	58020400 	.word	0x58020400
 8004534:	58020800 	.word	0x58020800
 8004538:	58020c00 	.word	0x58020c00
 800453c:	58021000 	.word	0x58021000
 8004540:	58021400 	.word	0x58021400
 8004544:	58021800 	.word	0x58021800
 8004548:	58021c00 	.word	0x58021c00
 800454c:	58022000 	.word	0x58022000
 8004550:	58022400 	.word	0x58022400
 8004554:	2300      	movs	r3, #0
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	f002 0203 	and.w	r2, r2, #3
 800455c:	0092      	lsls	r2, r2, #2
 800455e:	4093      	lsls	r3, r2
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004566:	4938      	ldr	r1, [pc, #224]	@ (8004648 <HAL_GPIO_Init+0x35c>)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	3302      	adds	r3, #2
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800459a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	3301      	adds	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	f47f ae63 	bne.w	8004300 <HAL_GPIO_Init+0x14>
  }
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	3724      	adds	r7, #36	@ 0x24
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	58000400 	.word	0x58000400

0800464c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004654:	4a08      	ldr	r2, [pc, #32]	@ (8004678 <HAL_HSEM_FastTake+0x2c>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3320      	adds	r3, #32
 800465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465e:	4a07      	ldr	r2, [pc, #28]	@ (800467c <HAL_HSEM_FastTake+0x30>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	58026400 	.word	0x58026400
 800467c:	80000300 	.word	0x80000300

08004680 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800468a:	4906      	ldr	r1, [pc, #24]	@ (80046a4 <HAL_HSEM_Release+0x24>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	58026400 	.word	0x58026400

080046a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80046b0:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d00a      	beq.n	80046d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046bc:	4b26      	ldr	r3, [pc, #152]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d001      	beq.n	80046ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e040      	b.n	8004750 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e03e      	b.n	8004750 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046d2:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80046da:	491f      	ldr	r1, [pc, #124]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046e2:	f7fc fc1b 	bl	8000f1c <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ea:	f7fc fc17 	bl	8000f1c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046f8:	d901      	bls.n	80046fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e028      	b.n	8004750 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046fe:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470a:	d1ee      	bne.n	80046ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b1e      	cmp	r3, #30
 8004710:	d008      	beq.n	8004724 <HAL_PWREx_ConfigSupply+0x7c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b2e      	cmp	r3, #46	@ 0x2e
 8004716:	d005      	beq.n	8004724 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b1d      	cmp	r3, #29
 800471c:	d002      	beq.n	8004724 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b2d      	cmp	r3, #45	@ 0x2d
 8004722:	d114      	bne.n	800474e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004724:	f7fc fbfa 	bl	8000f1c <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800472a:	e009      	b.n	8004740 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800472c:	f7fc fbf6 	bl	8000f1c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800473a:	d901      	bls.n	8004740 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e007      	b.n	8004750 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_PWREx_ConfigSupply+0xb0>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d1ee      	bne.n	800472c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	58024800 	.word	0x58024800

0800475c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f000 bc48 	b.w	8005000 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8088 	beq.w	800488e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477e:	4b99      	ldr	r3, [pc, #612]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004788:	4b96      	ldr	r3, [pc, #600]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	2b10      	cmp	r3, #16
 8004792:	d007      	beq.n	80047a4 <HAL_RCC_OscConfig+0x48>
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	2b18      	cmp	r3, #24
 8004798:	d111      	bne.n	80047be <HAL_RCC_OscConfig+0x62>
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b8f      	ldr	r3, [pc, #572]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d06d      	beq.n	800488c <HAL_RCC_OscConfig+0x130>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d169      	bne.n	800488c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f000 bc21 	b.w	8005000 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 80047c8:	4b86      	ldr	r3, [pc, #536]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a85      	ldr	r2, [pc, #532]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e02e      	b.n	8004834 <HAL_RCC_OscConfig+0xd8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x9c>
 80047de:	4b81      	ldr	r3, [pc, #516]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a80      	ldr	r2, [pc, #512]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b7e      	ldr	r3, [pc, #504]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a7d      	ldr	r2, [pc, #500]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80047f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xd8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0xc0>
 8004802:	4b78      	ldr	r3, [pc, #480]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a77      	ldr	r2, [pc, #476]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b75      	ldr	r3, [pc, #468]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a74      	ldr	r2, [pc, #464]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xd8>
 800481c:	4b71      	ldr	r3, [pc, #452]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a70      	ldr	r2, [pc, #448]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b6e      	ldr	r3, [pc, #440]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6d      	ldr	r2, [pc, #436]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fc fb6e 	bl	8000f1c <HAL_GetTick>
 8004840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7fc fb6a 	bl	8000f1c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	@ 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e3d4      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xe8>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fc fb5a 	bl	8000f1c <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486c:	f7fc fb56 	bl	8000f1c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	@ 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e3c0      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800487e:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x110>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80ca 	beq.w	8004a30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489c:	4b51      	ldr	r3, [pc, #324]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048a6:	4b4f      	ldr	r3, [pc, #316]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_RCC_OscConfig+0x166>
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2b18      	cmp	r3, #24
 80048b6:	d156      	bne.n	8004966 <HAL_RCC_OscConfig+0x20a>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d151      	bne.n	8004966 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c2:	4b48      	ldr	r3, [pc, #288]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x17e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e392      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048da:	4b42      	ldr	r3, [pc, #264]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 0219 	bic.w	r2, r3, #25
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	493f      	ldr	r1, [pc, #252]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fc fb16 	bl	8000f1c <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fc fb12 	bl	8000f1c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e37c      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004906:	4b37      	ldr	r3, [pc, #220]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	f7fc fb0f 	bl	8000f34 <HAL_GetREVID>
 8004916:	4603      	mov	r3, r0
 8004918:	f241 0203 	movw	r2, #4099	@ 0x1003
 800491c:	4293      	cmp	r3, r2
 800491e:	d817      	bhi.n	8004950 <HAL_RCC_OscConfig+0x1f4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d108      	bne.n	800493a <HAL_RCC_OscConfig+0x1de>
 8004928:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004930:	4a2c      	ldr	r2, [pc, #176]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004936:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	e07a      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	4b2a      	ldr	r3, [pc, #168]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	031b      	lsls	r3, r3, #12
 8004948:	4926      	ldr	r1, [pc, #152]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800494e:	e06f      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4921      	ldr	r1, [pc, #132]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004964:	e064      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d047      	beq.n	80049fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800496e:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 0219 	bic.w	r2, r3, #25
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	491a      	ldr	r1, [pc, #104]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fc facc 	bl	8000f1c <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fc fac8 	bl	8000f1c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e332      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499a:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	f7fc fac5 	bl	8000f34 <HAL_GetREVID>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d819      	bhi.n	80049e8 <HAL_RCC_OscConfig+0x28c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d108      	bne.n	80049ce <HAL_RCC_OscConfig+0x272>
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80049c4:	4a07      	ldr	r2, [pc, #28]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ca:	6053      	str	r3, [r2, #4]
 80049cc:	e030      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	031b      	lsls	r3, r3, #12
 80049dc:	4901      	ldr	r1, [pc, #4]	@ (80049e4 <HAL_RCC_OscConfig+0x288>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
 80049e2:	e025      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
 80049e4:	58024400 	.word	0x58024400
 80049e8:	4b9a      	ldr	r3, [pc, #616]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	4997      	ldr	r1, [pc, #604]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	e018      	b.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fe:	4b95      	ldr	r3, [pc, #596]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a94      	ldr	r2, [pc, #592]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fc fa87 	bl	8000f1c <HAL_GetTick>
 8004a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fc fa83 	bl	8000f1c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e2ed      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a24:	4b8b      	ldr	r3, [pc, #556]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a9 	beq.w	8004b90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3e:	4b85      	ldr	r3, [pc, #532]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a48:	4b82      	ldr	r3, [pc, #520]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d007      	beq.n	8004a64 <HAL_RCC_OscConfig+0x308>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b18      	cmp	r3, #24
 8004a58:	d13a      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x374>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d135      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a64:	4b7b      	ldr	r3, [pc, #492]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_OscConfig+0x320>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	2b80      	cmp	r3, #128	@ 0x80
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e2c1      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a7c:	f7fc fa5a 	bl	8000f34 <HAL_GetREVID>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d817      	bhi.n	8004aba <HAL_RCC_OscConfig+0x35e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d108      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x348>
 8004a92:	4b70      	ldr	r3, [pc, #448]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aa0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa2:	e075      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	069b      	lsls	r3, r3, #26
 8004ab2:	4968      	ldr	r1, [pc, #416]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ab8:	e06a      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aba:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	4962      	ldr	r1, [pc, #392]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ace:	e05f      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d042      	beq.n	8004b5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fa1a 	bl	8000f1c <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004aec:	f7fc fa16 	bl	8000f1c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e280      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004afe:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b0a:	f7fc fa13 	bl	8000f34 <HAL_GetREVID>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d817      	bhi.n	8004b48 <HAL_RCC_OscConfig+0x3ec>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d108      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3d6>
 8004b20:	4b4c      	ldr	r3, [pc, #304]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b28:	4a4a      	ldr	r2, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b2e:	6053      	str	r3, [r2, #4]
 8004b30:	e02e      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
 8004b32:	4b48      	ldr	r3, [pc, #288]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	069b      	lsls	r3, r3, #26
 8004b40:	4944      	ldr	r1, [pc, #272]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
 8004b46:	e023      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
 8004b48:	4b42      	ldr	r3, [pc, #264]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	493f      	ldr	r1, [pc, #252]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
 8004b5c:	e018      	b.n	8004b90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a3c      	ldr	r2, [pc, #240]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fc f9d7 	bl	8000f1c <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b72:	f7fc f9d3 	bl	8000f1c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e23d      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b84:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d036      	beq.n	8004c0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d019      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fc f9b4 	bl	8000f1c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fc f9b0 	bl	8000f1c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e21a      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bca:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x45c>
 8004bd6:	e018      	b.n	8004c0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fc f99a 	bl	8000f1c <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fc f996 	bl	8000f1c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e200      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bfe:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d039      	beq.n	8004c8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a0c      	ldr	r2, [pc, #48]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c2a:	f7fc f977 	bl	8000f1c <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c32:	f7fc f973 	bl	8000f1c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1dd      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c44:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <HAL_RCC_OscConfig+0x4f8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4d6>
 8004c50:	e01b      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c58:	4b9b      	ldr	r3, [pc, #620]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a9a      	ldr	r2, [pc, #616]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c64:	f7fc f95a 	bl	8000f1c <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6c:	f7fc f956 	bl	8000f1c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1c0      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c7e:	4b92      	ldr	r3, [pc, #584]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8081 	beq.w	8004d9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c98:	4b8c      	ldr	r3, [pc, #560]	@ (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a8b      	ldr	r2, [pc, #556]	@ (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ca4:	f7fc f93a 	bl	8000f1c <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cac:	f7fc f936 	bl	8000f1c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1a0      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cbe:	4b83      	ldr	r3, [pc, #524]	@ (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d106      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x584>
 8004cd2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cde:	e02d      	b.n	8004d3c <HAL_RCC_OscConfig+0x5e0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10c      	bne.n	8004d02 <HAL_RCC_OscConfig+0x5a6>
 8004ce8:	4b77      	ldr	r3, [pc, #476]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	4a76      	ldr	r2, [pc, #472]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf4:	4b74      	ldr	r3, [pc, #464]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	4a73      	ldr	r2, [pc, #460]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d00:	e01c      	b.n	8004d3c <HAL_RCC_OscConfig+0x5e0>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x5c8>
 8004d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d16:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0x5e0>
 8004d24:	4b68      	ldr	r3, [pc, #416]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a67      	ldr	r2, [pc, #412]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d30:	4b65      	ldr	r3, [pc, #404]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	4a64      	ldr	r2, [pc, #400]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	f023 0304 	bic.w	r3, r3, #4
 8004d3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fc f8ea 	bl	8000f1c <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fc f8e6 	bl	8000f1c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e14e      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d62:	4b59      	ldr	r3, [pc, #356]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0ee      	beq.n	8004d4c <HAL_RCC_OscConfig+0x5f0>
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fc f8d4 	bl	8000f1c <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fc f8d0 	bl	8000f1c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e138      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ee      	bne.n	8004d78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 812d 	beq.w	8004ffe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004da4:	4b48      	ldr	r3, [pc, #288]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dac:	2b18      	cmp	r3, #24
 8004dae:	f000 80bd 	beq.w	8004f2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	f040 809e 	bne.w	8004ef8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b42      	ldr	r3, [pc, #264]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a41      	ldr	r2, [pc, #260]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fc f8a8 	bl	8000f1c <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fc f8a4 	bl	8000f1c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e10e      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004de2:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dee:	4b36      	ldr	r3, [pc, #216]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004df2:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <HAL_RCC_OscConfig+0x774>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	430a      	orrs	r2, r1
 8004e02:	4931      	ldr	r1, [pc, #196]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e16:	3b01      	subs	r3, #1
 8004e18:	025b      	lsls	r3, r3, #9
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	3b01      	subs	r3, #1
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	3b01      	subs	r3, #1
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e38:	4923      	ldr	r1, [pc, #140]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a21      	ldr	r2, [pc, #132]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <HAL_RCC_OscConfig+0x778>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e56:	00d2      	lsls	r2, r2, #3
 8004e58:	491b      	ldr	r1, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	f023 020c 	bic.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	4917      	ldr	r1, [pc, #92]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e70:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	f023 0202 	bic.w	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7c:	4912      	ldr	r1, [pc, #72]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e82:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	4a10      	ldr	r2, [pc, #64]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc f82d 	bl	8000f1c <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ec4:	e011      	b.n	8004eea <HAL_RCC_OscConfig+0x78e>
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	58024800 	.word	0x58024800
 8004ed0:	fffffc0c 	.word	0xfffffc0c
 8004ed4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fc f820 	bl	8000f1c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e08a      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004eea:	4b47      	ldr	r3, [pc, #284]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x77c>
 8004ef6:	e082      	b.n	8004ffe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b43      	ldr	r3, [pc, #268]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a42      	ldr	r2, [pc, #264]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fc f80a 	bl	8000f1c <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fc f806 	bl	8000f1c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e070      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x7b0>
 8004f2a:	e068      	b.n	8004ffe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f2c:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f32:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d031      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d12a      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d122      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d11a      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	0a5b      	lsrs	r3, r3, #9
 8004f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d111      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	0e1b      	lsrs	r3, r3, #24
 8004f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e02b      	b.n	8005000 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004fa8:	4b17      	ldr	r3, [pc, #92]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d01f      	beq.n	8004ffe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004fbe:	4b12      	ldr	r3, [pc, #72]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	4a11      	ldr	r2, [pc, #68]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fca:	f7fb ffa7 	bl	8000f1c <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fd0:	bf00      	nop
 8004fd2:	f7fb ffa3 	bl	8000f1c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d0f9      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <HAL_RCC_OscConfig+0x8b0>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fea:	00d2      	lsls	r2, r2, #3
 8004fec:	4906      	ldr	r1, [pc, #24]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ff2:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a04      	ldr	r2, [pc, #16]	@ (8005008 <HAL_RCC_OscConfig+0x8ac>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3730      	adds	r7, #48	@ 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	58024400 	.word	0x58024400
 800500c:	ffff0007 	.word	0xffff0007

08005010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e19c      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b8a      	ldr	r3, [pc, #552]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d910      	bls.n	8005054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b87      	ldr	r3, [pc, #540]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 020f 	bic.w	r2, r3, #15
 800503a:	4985      	ldr	r1, [pc, #532]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b83      	ldr	r3, [pc, #524]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e184      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	4b7b      	ldr	r3, [pc, #492]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800506c:	429a      	cmp	r2, r3
 800506e:	d908      	bls.n	8005082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005070:	4b78      	ldr	r3, [pc, #480]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4975      	ldr	r1, [pc, #468]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 800507e:	4313      	orrs	r3, r2
 8005080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	4b70      	ldr	r3, [pc, #448]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509a:	429a      	cmp	r2, r3
 800509c:	d908      	bls.n	80050b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800509e:	4b6d      	ldr	r3, [pc, #436]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	496a      	ldr	r1, [pc, #424]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	4b64      	ldr	r3, [pc, #400]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d908      	bls.n	80050de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050cc:	4b61      	ldr	r3, [pc, #388]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	495e      	ldr	r1, [pc, #376]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d908      	bls.n	800510c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050fa:	4b56      	ldr	r3, [pc, #344]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	4953      	ldr	r1, [pc, #332]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005108:	4313      	orrs	r3, r2
 800510a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4b4d      	ldr	r3, [pc, #308]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	429a      	cmp	r2, r3
 8005126:	d908      	bls.n	800513a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005128:	4b4a      	ldr	r3, [pc, #296]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f023 020f 	bic.w	r2, r3, #15
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4947      	ldr	r1, [pc, #284]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005136:	4313      	orrs	r3, r2
 8005138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d055      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005146:	4b43      	ldr	r3, [pc, #268]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4940      	ldr	r1, [pc, #256]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005154:	4313      	orrs	r3, r2
 8005156:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d107      	bne.n	8005170 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005160:	4b3c      	ldr	r3, [pc, #240]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d121      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0f6      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d107      	bne.n	8005188 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005178:	4b36      	ldr	r3, [pc, #216]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d115      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0ea      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005190:	4b30      	ldr	r3, [pc, #192]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0de      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d6      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051b0:	4b28      	ldr	r3, [pc, #160]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f023 0207 	bic.w	r2, r3, #7
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4925      	ldr	r1, [pc, #148]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c2:	f7fb feab 	bl	8000f1c <HAL_GetTick>
 80051c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ca:	f7fb fea7 	bl	8000f1c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0be      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d1eb      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	429a      	cmp	r2, r3
 800520c:	d208      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520e:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f023 020f 	bic.w	r2, r3, #15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	490e      	ldr	r1, [pc, #56]	@ (8005254 <HAL_RCC_ClockConfig+0x244>)
 800521c:	4313      	orrs	r3, r2
 800521e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d214      	bcs.n	8005258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b08      	ldr	r3, [pc, #32]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 020f 	bic.w	r2, r3, #15
 8005236:	4906      	ldr	r1, [pc, #24]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b04      	ldr	r3, [pc, #16]	@ (8005250 <HAL_RCC_ClockConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e086      	b.n	800535e <HAL_RCC_ClockConfig+0x34e>
 8005250:	52002000 	.word	0x52002000
 8005254:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	4b3f      	ldr	r3, [pc, #252]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005270:	429a      	cmp	r2, r3
 8005272:	d208      	bcs.n	8005286 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005274:	4b3c      	ldr	r3, [pc, #240]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	4939      	ldr	r1, [pc, #228]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005282:	4313      	orrs	r3, r2
 8005284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	4b34      	ldr	r3, [pc, #208]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529e:	429a      	cmp	r2, r3
 80052a0:	d208      	bcs.n	80052b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052a2:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	492e      	ldr	r1, [pc, #184]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	4b28      	ldr	r3, [pc, #160]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d208      	bcs.n	80052e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	4922      	ldr	r1, [pc, #136]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d010      	beq.n	8005310 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d208      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	4917      	ldr	r1, [pc, #92]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 800530c:	4313      	orrs	r3, r2
 800530e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005310:	f000 f89e 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	4912      	ldr	r1, [pc, #72]	@ (800536c <HAL_RCC_ClockConfig+0x35c>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800532e:	4b0e      	ldr	r3, [pc, #56]	@ (8005368 <HAL_RCC_ClockConfig+0x358>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <HAL_RCC_ClockConfig+0x35c>)
 8005338:	5cd3      	ldrb	r3, [r2, r3]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	4a0a      	ldr	r2, [pc, #40]	@ (8005370 <HAL_RCC_ClockConfig+0x360>)
 8005346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005348:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <HAL_RCC_ClockConfig+0x364>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <HAL_RCC_ClockConfig+0x368>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb fd98 	bl	8000e88 <HAL_InitTick>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400
 800536c:	080088c0 	.word	0x080088c0
 8005370:	24000004 	.word	0x24000004
 8005374:	24000000 	.word	0x24000000
 8005378:	24000014 	.word	0x24000014

0800537c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	@ 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d12a      	bne.n	80053e4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800538e:	4b2d      	ldr	r3, [pc, #180]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 8005390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005394:	4a2b      	ldr	r2, [pc, #172]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800539e:	4b29      	ldr	r3, [pc, #164]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80053ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b6:	2303      	movs	r3, #3
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80053c2:	f107 031c 	add.w	r3, r7, #28
 80053c6:	4619      	mov	r1, r3
 80053c8:	481f      	ldr	r0, [pc, #124]	@ (8005448 <HAL_RCC_MCOConfig+0xcc>)
 80053ca:	f7fe ff8f 	bl	80042ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80053ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	430b      	orrs	r3, r1
 80053dc:	4919      	ldr	r1, [pc, #100]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80053e2:	e02a      	b.n	800543a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80053e4:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ea:	4a16      	ldr	r2, [pc, #88]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053f4:	4b13      	ldr	r3, [pc, #76]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 80053f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	2303      	movs	r3, #3
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005414:	2300      	movs	r3, #0
 8005416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4619      	mov	r1, r3
 800541e:	480b      	ldr	r0, [pc, #44]	@ (800544c <HAL_RCC_MCOConfig+0xd0>)
 8005420:	f7fe ff64 	bl	80042ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	01d9      	lsls	r1, r3, #7
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	430b      	orrs	r3, r1
 8005434:	4903      	ldr	r1, [pc, #12]	@ (8005444 <HAL_RCC_MCOConfig+0xc8>)
 8005436:	4313      	orrs	r3, r2
 8005438:	610b      	str	r3, [r1, #16]
}
 800543a:	bf00      	nop
 800543c:	3730      	adds	r7, #48	@ 0x30
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	58024400 	.word	0x58024400
 8005448:	58020000 	.word	0x58020000
 800544c:	58020800 	.word	0x58020800

08005450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005456:	4bb3      	ldr	r3, [pc, #716]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800545e:	2b18      	cmp	r3, #24
 8005460:	f200 8155 	bhi.w	800570e <HAL_RCC_GetSysClockFreq+0x2be>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	080054d1 	.word	0x080054d1
 8005470:	0800570f 	.word	0x0800570f
 8005474:	0800570f 	.word	0x0800570f
 8005478:	0800570f 	.word	0x0800570f
 800547c:	0800570f 	.word	0x0800570f
 8005480:	0800570f 	.word	0x0800570f
 8005484:	0800570f 	.word	0x0800570f
 8005488:	0800570f 	.word	0x0800570f
 800548c:	080054f7 	.word	0x080054f7
 8005490:	0800570f 	.word	0x0800570f
 8005494:	0800570f 	.word	0x0800570f
 8005498:	0800570f 	.word	0x0800570f
 800549c:	0800570f 	.word	0x0800570f
 80054a0:	0800570f 	.word	0x0800570f
 80054a4:	0800570f 	.word	0x0800570f
 80054a8:	0800570f 	.word	0x0800570f
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	0800570f 	.word	0x0800570f
 80054b4:	0800570f 	.word	0x0800570f
 80054b8:	0800570f 	.word	0x0800570f
 80054bc:	0800570f 	.word	0x0800570f
 80054c0:	0800570f 	.word	0x0800570f
 80054c4:	0800570f 	.word	0x0800570f
 80054c8:	0800570f 	.word	0x0800570f
 80054cc:	08005503 	.word	0x08005503
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054d0:	4b94      	ldr	r3, [pc, #592]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054dc:	4b91      	ldr	r3, [pc, #580]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	08db      	lsrs	r3, r3, #3
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	4a90      	ldr	r2, [pc, #576]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054ee:	e111      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054f2:	61bb      	str	r3, [r7, #24]
      break;
 80054f4:	e10e      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054f6:	4b8d      	ldr	r3, [pc, #564]	@ (800572c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054f8:	61bb      	str	r3, [r7, #24]
      break;
 80054fa:	e10b      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005730 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054fe:	61bb      	str	r3, [r7, #24]
      break;
 8005500:	e108      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005502:	4b88      	ldr	r3, [pc, #544]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800550c:	4b85      	ldr	r3, [pc, #532]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005516:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005518:	4b82      	ldr	r3, [pc, #520]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005522:	4b80      	ldr	r3, [pc, #512]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005526:	08db      	lsrs	r3, r3, #3
 8005528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80e1 	beq.w	8005708 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b02      	cmp	r3, #2
 800554a:	f000 8083 	beq.w	8005654 <HAL_RCC_GetSysClockFreq+0x204>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b02      	cmp	r3, #2
 8005552:	f200 80a1 	bhi.w	8005698 <HAL_RCC_GetSysClockFreq+0x248>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x114>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d056      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005562:	e099      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005564:	4b6f      	ldr	r3, [pc, #444]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d02d      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005570:	4b6c      	ldr	r3, [pc, #432]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	4a6b      	ldr	r2, [pc, #428]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559a:	4b62      	ldr	r3, [pc, #392]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055ca:	e087      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005738 <HAL_RCC_GetSysClockFreq+0x2e8>
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b51      	ldr	r3, [pc, #324]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800560e:	e065      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800573c <HAL_RCC_GetSysClockFreq+0x2ec>
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b40      	ldr	r3, [pc, #256]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a02 	vldr	s12, [r7, #8]
 8005636:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005652:	e043      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005740 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	4b2f      	ldr	r3, [pc, #188]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005676:	ed97 6a02 	vldr	s12, [r7, #8]
 800567a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800567e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005696:	e021      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800573c <HAL_RCC_GetSysClockFreq+0x2ec>
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80056be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	0a5b      	lsrs	r3, r3, #9
 80056e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056e6:	3301      	adds	r3, #1
 80056e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005700:	ee17 3a90 	vmov	r3, s15
 8005704:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005706:	e005      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
      break;
 800570c:	e002      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800570e:	4b07      	ldr	r3, [pc, #28]	@ (800572c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005710:	61bb      	str	r3, [r7, #24]
      break;
 8005712:	bf00      	nop
  }

  return sysclockfreq;
 8005714:	69bb      	ldr	r3, [r7, #24]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3724      	adds	r7, #36	@ 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	58024400 	.word	0x58024400
 8005728:	03d09000 	.word	0x03d09000
 800572c:	003d0900 	.word	0x003d0900
 8005730:	017d7840 	.word	0x017d7840
 8005734:	46000000 	.word	0x46000000
 8005738:	4c742400 	.word	0x4c742400
 800573c:	4a742400 	.word	0x4a742400
 8005740:	4bbebc20 	.word	0x4bbebc20

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800574a:	f7ff fe81 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 800574e:	4602      	mov	r2, r0
 8005750:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <HAL_RCC_GetHCLKFreq+0x50>)
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	490f      	ldr	r1, [pc, #60]	@ (8005798 <HAL_RCC_GetHCLKFreq+0x54>)
 800575c:	5ccb      	ldrb	r3, [r1, r3]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	fa22 f303 	lsr.w	r3, r2, r3
 8005766:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005768:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <HAL_RCC_GetHCLKFreq+0x50>)
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <HAL_RCC_GetHCLKFreq+0x54>)
 8005772:	5cd3      	ldrb	r3, [r2, r3]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	4a07      	ldr	r2, [pc, #28]	@ (800579c <HAL_RCC_GetHCLKFreq+0x58>)
 8005780:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005782:	4a07      	ldr	r2, [pc, #28]	@ (80057a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <HAL_RCC_GetHCLKFreq+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	58024400 	.word	0x58024400
 8005798:	080088c0 	.word	0x080088c0
 800579c:	24000004 	.word	0x24000004
 80057a0:	24000000 	.word	0x24000000

080057a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057a8:	f7ff ffcc 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	4904      	ldr	r1, [pc, #16]	@ (80057cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	58024400 	.word	0x58024400
 80057cc:	080088c0 	.word	0x080088c0

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80057d4:	f7ff ffb6 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4904      	ldr	r1, [pc, #16]	@ (80057f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	58024400 	.word	0x58024400
 80057f8:	080088c0 	.word	0x080088c0

080057fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005800:	b0cc      	sub	sp, #304	@ 0x130
 8005802:	af00      	add	r7, sp, #0
 8005804:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005808:	2300      	movs	r3, #0
 800580a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800580e:	2300      	movs	r3, #0
 8005810:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005814:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005820:	2500      	movs	r5, #0
 8005822:	ea54 0305 	orrs.w	r3, r4, r5
 8005826:	d049      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800582c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005832:	d02f      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005834:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005838:	d828      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800583e:	d01a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005844:	d822      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800584e:	d007      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005850:	e01c      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005852:	4bb8      	ldr	r3, [pc, #736]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	4ab7      	ldr	r2, [pc, #732]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800585e:	e01a      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005864:	3308      	adds	r3, #8
 8005866:	2102      	movs	r1, #2
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fccf 	bl	800720c <RCCEx_PLL2_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005874:	e00f      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587a:	3328      	adds	r3, #40	@ 0x28
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fd76 	bl	8007370 <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800588a:	e004      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005892:	e000      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005896:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800589e:	4ba5      	ldr	r3, [pc, #660]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ac:	4aa1      	ldr	r2, [pc, #644]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80058b2:	e003      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80058c8:	f04f 0900 	mov.w	r9, #0
 80058cc:	ea58 0309 	orrs.w	r3, r8, r9
 80058d0:	d047      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80058d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d82a      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	080058f9 	.word	0x080058f9
 80058e8:	08005907 	.word	0x08005907
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800593b 	.word	0x0800593b
 80058f4:	0800593b 	.word	0x0800593b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	4a8d      	ldr	r2, [pc, #564]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005904:	e01a      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800590a:	3308      	adds	r3, #8
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fc7c 	bl	800720c <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800591a:	e00f      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005920:	3328      	adds	r3, #40	@ 0x28
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fd23 	bl	8007370 <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005930:	e004      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005938:	e000      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800593a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005944:	4b7b      	ldr	r3, [pc, #492]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	f023 0107 	bic.w	r1, r3, #7
 800594c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005952:	4a78      	ldr	r2, [pc, #480]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005954:	430b      	orrs	r3, r1
 8005956:	6513      	str	r3, [r2, #80]	@ 0x50
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800595e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800596e:	f04f 0b00 	mov.w	fp, #0
 8005972:	ea5a 030b 	orrs.w	r3, sl, fp
 8005976:	d04c      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800597c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005982:	d030      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005988:	d829      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800598a:	2bc0      	cmp	r3, #192	@ 0xc0
 800598c:	d02d      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800598e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005990:	d825      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005992:	2b80      	cmp	r3, #128	@ 0x80
 8005994:	d018      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005996:	2b80      	cmp	r3, #128	@ 0x80
 8005998:	d821      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800599e:	2b40      	cmp	r3, #64	@ 0x40
 80059a0:	d007      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80059a2:	e01c      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4b63      	ldr	r3, [pc, #396]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	4a62      	ldr	r2, [pc, #392]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059b0:	e01c      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b6:	3308      	adds	r3, #8
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fc26 	bl	800720c <RCCEx_PLL2_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059c6:	e011      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059cc:	3328      	adds	r3, #40	@ 0x28
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fccd 	bl	8007370 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059dc:	e006      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80059fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a02:	4a4c      	ldr	r2, [pc, #304]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a1e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005a28:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d053      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a3e:	d035      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a44:	d82e      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a4a:	d031      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a50:	d828      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a56:	d01a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a5c:	d822      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a66:	d007      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6a:	4b32      	ldr	r3, [pc, #200]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	4a31      	ldr	r2, [pc, #196]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a76:	e01c      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fbc3 	bl	800720c <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e011      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a92:	3328      	adds	r3, #40	@ 0x28
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fc6a 	bl	8007370 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e006      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005aac:	bf00      	nop
 8005aae:	e000      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aba:	4b1e      	ldr	r3, [pc, #120]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005aca:	4a1a      	ldr	r2, [pc, #104]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ad0:	e003      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ad6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ae6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005af0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d056      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b06:	d038      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b0c:	d831      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b12:	d034      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b18:	d82b      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b1e:	d01d      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b24:	d825      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b30:	e01f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b32:	bf00      	nop
 8005b34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4ba2      	ldr	r3, [pc, #648]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4aa1      	ldr	r2, [pc, #644]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b44:	e01c      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fb5c 	bl	800720c <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e011      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b60:	3328      	adds	r3, #40	@ 0x28
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fc03 	bl	8007370 <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b88:	4b8e      	ldr	r3, [pc, #568]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b98:	4a8a      	ldr	r2, [pc, #552]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ba4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005bb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005bbe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d03a      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bce:	2b30      	cmp	r3, #48	@ 0x30
 8005bd0:	d01f      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005bd2:	2b30      	cmp	r3, #48	@ 0x30
 8005bd4:	d819      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d00c      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d815      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d019      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d111      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be6:	4b77      	ldr	r3, [pc, #476]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	4a76      	ldr	r2, [pc, #472]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bf2:	e011      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fb05 	bl	800720c <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c08:	e006      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c10:	e002      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c20:	4b68      	ldr	r3, [pc, #416]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	4a65      	ldr	r2, [pc, #404]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c54:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	d051      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c68:	d035      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c6e:	d82e      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c74:	d031      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c7a:	d828      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c80:	d01a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d822      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c90:	d007      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c92:	e01c      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e01c      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 faae 	bl	800720c <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cb6:	e011      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cbc:	3328      	adds	r3, #40	@ 0x28
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fb55 	bl	8007370 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cd4:	e002      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ce4:	4b37      	ldr	r3, [pc, #220]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf2:	4a34      	ldr	r2, [pc, #208]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d056      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2c:	d033      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d32:	d82c      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005d3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d3e:	d826      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d44:	d02b      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d4a:	d820      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d50:	d012      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005d52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d56:	d81a      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d022      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d60:	d115      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d66:	3308      	adds	r3, #8
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fa4e 	bl	800720c <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d76:	e015      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7c:	3328      	adds	r3, #40	@ 0x28
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 faf5 	bl	8007370 <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d94:	e006      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d96:	bf00      	nop
 8005d98:	e004      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dba:	4a02      	ldr	r2, [pc, #8]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dc0:	e006      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dcc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ddc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005de6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d055      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dfc:	d033      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e02:	d82c      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d02f      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0e:	d826      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e14:	d02b      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e1a:	d820      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e20:	d012      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e26:	d81a      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d022      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e30:	d115      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e36:	3308      	adds	r3, #8
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 f9e6 	bl	800720c <RCCEx_PLL2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e46:	e015      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e4c:	3328      	adds	r3, #40	@ 0x28
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fa8d 	bl	8007370 <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e66:	bf00      	nop
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e7c:	4bb6      	ldr	r3, [pc, #728]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e8c:	4ab2      	ldr	r2, [pc, #712]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e92:	e003      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d02a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f999 	bl	800720c <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005ee0:	e004      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ee8:	e000      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005ef4:	4b98      	ldr	r3, [pc, #608]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f02:	4a95      	ldr	r2, [pc, #596]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d037      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3c:	d00e      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f42:	d816      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d018      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4c:	d111      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4e:	4b82      	ldr	r3, [pc, #520]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	4a81      	ldr	r2, [pc, #516]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f5a:	e00f      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f60:	3308      	adds	r3, #8
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f951 	bl	800720c <RCCEx_PLL2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f70:	e004      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f78:	e000      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f84:	4b74      	ldr	r3, [pc, #464]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f92:	4a71      	ldr	r2, [pc, #452]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fb8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d03a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d81d      	bhi.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08006011 	.word	0x08006011
 8005fd8:	08005fe5 	.word	0x08005fe5
 8005fdc:	08005ff3 	.word	0x08005ff3
 8005fe0:	08006011 	.word	0x08006011
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ff0:	e00f      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 f906 	bl	800720c <RCCEx_PLL2_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006006:	e004      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8006010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006012:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800601a:	4b4f      	ldr	r3, [pc, #316]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800601c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601e:	f023 0103 	bic.w	r1, r3, #3
 8006022:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006028:	4a4b      	ldr	r2, [pc, #300]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800602a:	430b      	orrs	r3, r1
 800602c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800602e:	e003      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006034:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800604e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	f000 80a0 	beq.w	800619a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800605a:	4b40      	ldr	r3, [pc, #256]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3f      	ldr	r2, [pc, #252]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006066:	f7fa ff59 	bl	8000f1c <HAL_GetTick>
 800606a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606e:	e00b      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006070:	f7fa ff54 	bl	8000f1c <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b64      	cmp	r3, #100	@ 0x64
 800607e:	d903      	bls.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006086:	e005      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006088:	4b34      	ldr	r3, [pc, #208]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ed      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8006094:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006098:	2b00      	cmp	r3, #0
 800609a:	d17a      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800609c:	4b2e      	ldr	r3, [pc, #184]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800609e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060a8:	4053      	eors	r3, r2
 80060aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d015      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060b2:	4b29      	ldr	r3, [pc, #164]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060be:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c2:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ca:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060d6:	4a20      	ldr	r2, [pc, #128]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80060dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ea:	d118      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fa ff16 	bl	8000f1c <HAL_GetTick>
 80060f0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f4:	e00d      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fa ff11 	bl	8000f1c <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006100:	1ad2      	subs	r2, r2, r3
 8006102:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006106:	429a      	cmp	r2, r3
 8006108:	d903      	bls.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8006110:	e005      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006112:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0eb      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800611e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006122:	2b00      	cmp	r3, #0
 8006124:	d130      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800612e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006136:	d115      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006138:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006148:	091a      	lsrs	r2, r3, #4
 800614a:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800614c:	4013      	ands	r3, r2
 800614e:	4a02      	ldr	r2, [pc, #8]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6113      	str	r3, [r2, #16]
 8006154:	e00c      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	58024800 	.word	0x58024800
 8006160:	00ffffcf 	.word	0x00ffffcf
 8006164:	4bd4      	ldr	r3, [pc, #848]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4ad3      	ldr	r2, [pc, #844]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800616a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800616e:	6113      	str	r3, [r2, #16]
 8006170:	4bd1      	ldr	r3, [pc, #836]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006172:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800617c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006180:	4acd      	ldr	r2, [pc, #820]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006182:	430b      	orrs	r3, r1
 8006184:	6713      	str	r3, [r2, #112]	@ 0x70
 8006186:	e008      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006188:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800618c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006190:	e003      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006196:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800619a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f002 0301 	and.w	r3, r2, #1
 80061a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061aa:	2300      	movs	r3, #0
 80061ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f000 808b 	beq.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c4:	2b28      	cmp	r3, #40	@ 0x28
 80061c6:	d86b      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80061c8:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080062a9 	.word	0x080062a9
 80061d4:	080062a1 	.word	0x080062a1
 80061d8:	080062a1 	.word	0x080062a1
 80061dc:	080062a1 	.word	0x080062a1
 80061e0:	080062a1 	.word	0x080062a1
 80061e4:	080062a1 	.word	0x080062a1
 80061e8:	080062a1 	.word	0x080062a1
 80061ec:	080062a1 	.word	0x080062a1
 80061f0:	08006275 	.word	0x08006275
 80061f4:	080062a1 	.word	0x080062a1
 80061f8:	080062a1 	.word	0x080062a1
 80061fc:	080062a1 	.word	0x080062a1
 8006200:	080062a1 	.word	0x080062a1
 8006204:	080062a1 	.word	0x080062a1
 8006208:	080062a1 	.word	0x080062a1
 800620c:	080062a1 	.word	0x080062a1
 8006210:	0800628b 	.word	0x0800628b
 8006214:	080062a1 	.word	0x080062a1
 8006218:	080062a1 	.word	0x080062a1
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080062a1 	.word	0x080062a1
 8006224:	080062a1 	.word	0x080062a1
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062a1 	.word	0x080062a1
 8006230:	080062a9 	.word	0x080062a9
 8006234:	080062a1 	.word	0x080062a1
 8006238:	080062a1 	.word	0x080062a1
 800623c:	080062a1 	.word	0x080062a1
 8006240:	080062a1 	.word	0x080062a1
 8006244:	080062a1 	.word	0x080062a1
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062a1 	.word	0x080062a1
 8006258:	080062a1 	.word	0x080062a1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062a9 	.word	0x080062a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006278:	3308      	adds	r3, #8
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ffc5 	bl	800720c <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006288:	e00f      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800628a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f001 f86c 	bl	8007370 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800629e:	e004      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062a6:	e000      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80062a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062b2:	4b81      	ldr	r3, [pc, #516]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c2:	4a7d      	ldr	r2, [pc, #500]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80062c8:	e003      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f002 0302 	and.w	r3, r2, #2
 80062de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80062ec:	460b      	mov	r3, r1
 80062ee:	4313      	orrs	r3, r2
 80062f0:	d042      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	d825      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80062fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006351 	.word	0x08006351
 8006308:	0800631d 	.word	0x0800631d
 800630c:	08006333 	.word	0x08006333
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006320:	3308      	adds	r3, #8
 8006322:	2101      	movs	r1, #1
 8006324:	4618      	mov	r0, r3
 8006326:	f000 ff71 	bl	800720c <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006330:	e00f      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006336:	3328      	adds	r3, #40	@ 0x28
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f001 f818 	bl	8007370 <RCCEx_PLL3_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006346:	e004      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800635a:	4b57      	ldr	r3, [pc, #348]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635e:	f023 0107 	bic.w	r1, r3, #7
 8006362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006368:	4a53      	ldr	r2, [pc, #332]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800636a:	430b      	orrs	r3, r1
 800636c:	6553      	str	r3, [r2, #84]	@ 0x54
 800636e:	e003      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006374:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006378:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 0304 	and.w	r3, r2, #4
 8006384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800638e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d044      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	d825      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80063a4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063f9 	.word	0x080063f9
 80063b0:	080063c5 	.word	0x080063c5
 80063b4:	080063db 	.word	0x080063db
 80063b8:	080063f9 	.word	0x080063f9
 80063bc:	080063f9 	.word	0x080063f9
 80063c0:	080063f9 	.word	0x080063f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c8:	3308      	adds	r3, #8
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 ff1d 	bl	800720c <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063d8:	e00f      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063de:	3328      	adds	r3, #40	@ 0x28
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 ffc4 	bl	8007370 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063ee:	e004      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80063f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006402:	4b2d      	ldr	r3, [pc, #180]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006406:	f023 0107 	bic.w	r1, r3, #7
 800640a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006412:	4a29      	ldr	r2, [pc, #164]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006414:	430b      	orrs	r3, r1
 8006416:	6593      	str	r3, [r2, #88]	@ 0x58
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800641e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f002 0320 	and.w	r3, r2, #32
 800642e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d057      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800644e:	d035      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006454:	d82c      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645a:	d031      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006460:	d826      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006462:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006466:	d02d      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006468:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800646c:	d820      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800646e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006472:	d012      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006478:	d81a      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d024      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800647e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006482:	d115      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006488:	3308      	adds	r3, #8
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f000 febd 	bl	800720c <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006498:	e017      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649e:	3328      	adds	r3, #40	@ 0x28
 80064a0:	2102      	movs	r1, #2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 ff64 	bl	8007370 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064ae:	e00c      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064b6:	e008      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80064b8:	58024400 	.word	0x58024400
        break;
 80064bc:	bf00      	nop
 80064be:	e004      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80064c0:	bf00      	nop
 80064c2:	e002      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80064c4:	bf00      	nop
 80064c6:	e000      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80064c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d2:	4bc2      	ldr	r3, [pc, #776]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e2:	4abe      	ldr	r2, [pc, #760]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80064e8:	e003      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006508:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d055      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800651a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800651e:	d033      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006520:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006524:	d82c      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652a:	d02f      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006530:	d826      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006532:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006536:	d02b      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653c:	d820      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800653e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006542:	d012      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006548:	d81a      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d022      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006552:	d115      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006558:	3308      	adds	r3, #8
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fe55 	bl	800720c <RCCEx_PLL2_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006568:	e015      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800656a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656e:	3328      	adds	r3, #40	@ 0x28
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fefc 	bl	8007370 <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800657e:	e00a      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006586:	e006      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006588:	bf00      	nop
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800659e:	4b8f      	ldr	r3, [pc, #572]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065ae:	4a8b      	ldr	r2, [pc, #556]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065ce:	2300      	movs	r3, #0
 80065d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d055      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065ea:	d033      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80065ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065f0:	d82c      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80065f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f6:	d02f      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fc:	d826      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80065fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006602:	d02b      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006604:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006608:	d820      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800660a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660e:	d012      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006614:	d81a      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d022      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800661e:	d115      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006624:	3308      	adds	r3, #8
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fdef 	bl	800720c <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006634:	e015      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800663a:	3328      	adds	r3, #40	@ 0x28
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fe96 	bl	8007370 <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800664a:	e00a      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006652:	e006      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006654:	bf00      	nop
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006658:	bf00      	nop
 800665a:	e002      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800665c:	bf00      	nop
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006662:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800666a:	4b5c      	ldr	r3, [pc, #368]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800667a:	4a58      	ldr	r2, [pc, #352]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006686:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800668a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f002 0308 	and.w	r3, r2, #8
 8006696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d01e      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066bc:	3328      	adds	r3, #40	@ 0x28
 80066be:	2102      	movs	r1, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fe55 	bl	8007370 <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066d2:	4b42      	ldr	r3, [pc, #264]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	4a3e      	ldr	r2, [pc, #248]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 0310 	and.w	r3, r2, #16
 80066f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d01e      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800670c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006714:	d10c      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fe26 	bl	8007370 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006730:	4b2a      	ldr	r3, [pc, #168]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006734:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800673c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006740:	4a26      	ldr	r2, [pc, #152]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006742:	430b      	orrs	r3, r1
 8006744:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006752:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800675c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006760:	460b      	mov	r3, r1
 8006762:	4313      	orrs	r3, r2
 8006764:	d040      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800676a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800676e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006772:	d022      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006778:	d81b      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006782:	d00b      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006784:	e015      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800678a:	3308      	adds	r3, #8
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fd3c 	bl	800720c <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800679a:	e00f      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800679c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067a0:	3328      	adds	r3, #40	@ 0x28
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fde3 	bl	8007370 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067b0:	e004      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80067ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067c4:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067d4:	4a01      	ldr	r2, [pc, #4]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067da:	e005      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80067dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80067e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067f6:	2300      	movs	r3, #0
 80067f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d03b      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006810:	d01f      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006812:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006816:	d818      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800681e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006822:	d007      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006824:	e011      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006826:	4b64      	ldr	r3, [pc, #400]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682a:	4a63      	ldr	r2, [pc, #396]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800682c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006832:	e00f      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006834:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006838:	3328      	adds	r3, #40	@ 0x28
 800683a:	2101      	movs	r1, #1
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fd97 	bl	8007370 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006848:	e004      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006854:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800685c:	4b56      	ldr	r3, [pc, #344]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800685e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006860:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800686c:	4a52      	ldr	r2, [pc, #328]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800686e:	430b      	orrs	r3, r1
 8006870:	6553      	str	r3, [r2, #84]	@ 0x54
 8006872:	e003      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006878:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800687c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006888:	673b      	str	r3, [r7, #112]	@ 0x70
 800688a:	2300      	movs	r3, #0
 800688c:	677b      	str	r3, [r7, #116]	@ 0x74
 800688e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d031      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80068a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a6:	d007      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80068a8:	e011      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068aa:	4b43      	ldr	r3, [pc, #268]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ae:	4a42      	ldr	r2, [pc, #264]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068b6:	e00e      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068bc:	3308      	adds	r3, #8
 80068be:	2102      	movs	r1, #2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fca3 	bl	800720c <RCCEx_PLL2_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068cc:	e003      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068de:	4b36      	ldr	r3, [pc, #216]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ec:	4a32      	ldr	r2, [pc, #200]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800690a:	2300      	movs	r3, #0
 800690c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800690e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d00c      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800691c:	3328      	adds	r3, #40	@ 0x28
 800691e:	2102      	movs	r1, #2
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fd25 	bl	8007370 <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800693e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006940:	2300      	movs	r3, #0
 8006942:	667b      	str	r3, [r7, #100]	@ 0x64
 8006944:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d03a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800694e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800695a:	d018      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800695c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006960:	d811      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006966:	d014      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696c:	d80b      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d011      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006976:	d106      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a0e      	ldr	r2, [pc, #56]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006984:	e008      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800698c:	e004      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800698e:	bf00      	nop
 8006990:	e002      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10d      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b0:	4a01      	ldr	r2, [pc, #4]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069b2:	430b      	orrs	r3, r1
 80069b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80069b6:	e005      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80069b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069d2:	2300      	movs	r3, #0
 80069d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069da:	460b      	mov	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069e0:	4baa      	ldr	r3, [pc, #680]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069ee:	4aa7      	ldr	r2, [pc, #668]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a02:	2300      	movs	r3, #0
 8006a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d00a      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a10:	4b9e      	ldr	r3, [pc, #632]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a20:	4a9a      	ldr	r2, [pc, #616]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a22:	430b      	orrs	r3, r1
 8006a24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a34:	2300      	movs	r3, #0
 8006a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a42:	4b92      	ldr	r3, [pc, #584]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a46:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a50:	4a8e      	ldr	r2, [pc, #568]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a64:	2300      	movs	r3, #0
 8006a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a72:	4b86      	ldr	r3, [pc, #536]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	4a85      	ldr	r2, [pc, #532]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a7c:	6113      	str	r3, [r2, #16]
 8006a7e:	4b83      	ldr	r3, [pc, #524]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a80:	6919      	ldr	r1, [r3, #16]
 8006a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a8a:	4a80      	ldr	r2, [pc, #512]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006aac:	4b77      	ldr	r3, [pc, #476]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aba:	4a74      	ldr	r2, [pc, #464]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ace:	2300      	movs	r3, #0
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	d00a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006adc:	4b6b      	ldr	r3, [pc, #428]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aec:	4a67      	ldr	r2, [pc, #412]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	2100      	movs	r1, #0
 8006afc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d011      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b12:	3308      	adds	r3, #8
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fb78 	bl	800720c <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6239      	str	r1, [r7, #32]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	d011      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b52:	3308      	adds	r3, #8
 8006b54:	2101      	movs	r1, #1
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fb58 	bl	800720c <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006b62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006b6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	61b9      	str	r1, [r7, #24]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	d011      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b92:	3308      	adds	r3, #8
 8006b94:	2102      	movs	r1, #2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fb38 	bl	800720c <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	6139      	str	r1, [r7, #16]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d011      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bd2:	3328      	adds	r3, #40	@ 0x28
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fbca 	bl	8007370 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006be2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	d011      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c12:	3328      	adds	r3, #40	@ 0x28
 8006c14:	2101      	movs	r1, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fbaa 	bl	8007370 <RCCEx_PLL3_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c52:	3328      	adds	r3, #40	@ 0x28
 8006c54:	2102      	movs	r1, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fb8a 	bl	8007370 <RCCEx_PLL3_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006c72:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006c86:	46bd      	mov	sp, r7
 8006c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8c:	58024400 	.word	0x58024400

08006c90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c94:	f7fe fd56 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	4904      	ldr	r1, [pc, #16]	@ (8006cb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ca6:	5ccb      	ldrb	r3, [r1, r3]
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	080088c0 	.word	0x080088c0

08006cbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	@ 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cce:	4b9f      	ldr	r3, [pc, #636]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	0b1b      	lsrs	r3, r3, #12
 8006cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cda:	4b9c      	ldr	r3, [pc, #624]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ce6:	4b99      	ldr	r3, [pc, #612]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cea:	08db      	lsrs	r3, r3, #3
 8006cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8111 	beq.w	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f000 8083 	beq.w	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	f200 80a1 	bhi.w	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d056      	beq.n	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d26:	e099      	b.n	8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d28:	4b88      	ldr	r3, [pc, #544]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02d      	beq.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d34:	4b85      	ldr	r3, [pc, #532]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a84      	ldr	r2, [pc, #528]	@ (8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d8e:	e087      	b.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	e065      	b.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b59      	ldr	r3, [pc, #356]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e043      	b.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b48      	ldr	r3, [pc, #288]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	e021      	b.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b37      	ldr	r3, [pc, #220]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	0a5b      	lsrs	r3, r3, #9
 8006ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec6:	ee17 2a90 	vmov	r2, s15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ece:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef4:	ee17 2a90 	vmov	r2, s15
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006efc:	4b13      	ldr	r3, [pc, #76]	@ (8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f22:	ee17 2a90 	vmov	r2, s15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f2a:	e008      	b.n	8006f3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	3724      	adds	r7, #36	@ 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	46000000 	.word	0x46000000
 8006f58:	4c742400 	.word	0x4c742400
 8006f5c:	4a742400 	.word	0x4a742400
 8006f60:	4bbebc20 	.word	0x4bbebc20

08006f64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b089      	sub	sp, #36	@ 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f6c:	4ba1      	ldr	r3, [pc, #644]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f76:	4b9f      	ldr	r3, [pc, #636]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	0d1b      	lsrs	r3, r3, #20
 8006f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f82:	4b9c      	ldr	r3, [pc, #624]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f8e:	4b99      	ldr	r3, [pc, #612]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	08db      	lsrs	r3, r3, #3
 8006f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8111 	beq.w	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	f000 8083 	beq.w	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	f200 80a1 	bhi.w	8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d056      	beq.n	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fce:	e099      	b.n	8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd0:	4b88      	ldr	r3, [pc, #544]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d02d      	beq.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fdc:	4b85      	ldr	r3, [pc, #532]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	4a84      	ldr	r2, [pc, #528]	@ (80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b7b      	ldr	r3, [pc, #492]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007036:	e087      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b6a      	ldr	r3, [pc, #424]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707a:	e065      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b59      	ldr	r3, [pc, #356]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070be:	e043      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b48      	ldr	r3, [pc, #288]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007102:	e021      	b.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007146:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007148:	4b2a      	ldr	r3, [pc, #168]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	0a5b      	lsrs	r3, r3, #9
 800714e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800715e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007162:	edd7 6a07 	vldr	s13, [r7, #28]
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716e:	ee17 2a90 	vmov	r2, s15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007176:	4b1f      	ldr	r3, [pc, #124]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800718c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007190:	edd7 6a07 	vldr	s13, [r7, #28]
 8007194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719c:	ee17 2a90 	vmov	r2, s15
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071a4:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	0e1b      	lsrs	r3, r3, #24
 80071aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071be:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 2a90 	vmov	r2, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071d2:	e008      	b.n	80071e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	609a      	str	r2, [r3, #8]
}
 80071e6:	bf00      	nop
 80071e8:	3724      	adds	r7, #36	@ 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	58024400 	.word	0x58024400
 80071f8:	03d09000 	.word	0x03d09000
 80071fc:	46000000 	.word	0x46000000
 8007200:	4c742400 	.word	0x4c742400
 8007204:	4a742400 	.word	0x4a742400
 8007208:	4bbebc20 	.word	0x4bbebc20

0800720c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800721a:	4b53      	ldr	r3, [pc, #332]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d101      	bne.n	800722a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e099      	b.n	800735e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800722a:	4b4f      	ldr	r3, [pc, #316]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a4e      	ldr	r2, [pc, #312]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007230:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007236:	f7f9 fe71 	bl	8000f1c <HAL_GetTick>
 800723a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800723c:	e008      	b.n	8007250 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800723e:	f7f9 fe6d 	bl	8000f1c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e086      	b.n	800735e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007250:	4b45      	ldr	r3, [pc, #276]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f0      	bne.n	800723e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800725c:	4b42      	ldr	r3, [pc, #264]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 800725e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007260:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	493f      	ldr	r1, [pc, #252]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 800726c:	4313      	orrs	r3, r2
 800726e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	3b01      	subs	r3, #1
 8007276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	3b01      	subs	r3, #1
 8007280:	025b      	lsls	r3, r3, #9
 8007282:	b29b      	uxth	r3, r3
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	041b      	lsls	r3, r3, #16
 800728e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	3b01      	subs	r3, #1
 800729a:	061b      	lsls	r3, r3, #24
 800729c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072a0:	4931      	ldr	r1, [pc, #196]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072a6:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	492d      	ldr	r1, [pc, #180]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072bc:	f023 0220 	bic.w	r2, r3, #32
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	4928      	ldr	r1, [pc, #160]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072ca:	4b27      	ldr	r3, [pc, #156]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	4a26      	ldr	r2, [pc, #152]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072d0:	f023 0310 	bic.w	r3, r3, #16
 80072d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072d6:	4b24      	ldr	r3, [pc, #144]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072da:	4b24      	ldr	r3, [pc, #144]	@ (800736c <RCCEx_PLL2_Config+0x160>)
 80072dc:	4013      	ands	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	69d2      	ldr	r2, [r2, #28]
 80072e2:	00d2      	lsls	r2, r2, #3
 80072e4:	4920      	ldr	r1, [pc, #128]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072f0:	f043 0310 	orr.w	r3, r3, #16
 80072f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	4a19      	ldr	r2, [pc, #100]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007308:	e00f      	b.n	800732a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d106      	bne.n	800731e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007310:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	4a14      	ldr	r2, [pc, #80]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800731a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800731c:	e005      	b.n	800732a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800731e:	4b12      	ldr	r3, [pc, #72]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	4a11      	ldr	r2, [pc, #68]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007328:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800732a:	4b0f      	ldr	r3, [pc, #60]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a0e      	ldr	r2, [pc, #56]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007330:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007336:	f7f9 fdf1 	bl	8000f1c <HAL_GetTick>
 800733a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800733c:	e008      	b.n	8007350 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800733e:	f7f9 fded 	bl	8000f1c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e006      	b.n	800735e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <RCCEx_PLL2_Config+0x15c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0f0      	beq.n	800733e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	58024400 	.word	0x58024400
 800736c:	ffff0007 	.word	0xffff0007

08007370 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800737e:	4b53      	ldr	r3, [pc, #332]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d101      	bne.n	800738e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e099      	b.n	80074c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800738e:	4b4f      	ldr	r3, [pc, #316]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a4e      	ldr	r2, [pc, #312]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800739a:	f7f9 fdbf 	bl	8000f1c <HAL_GetTick>
 800739e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a0:	e008      	b.n	80073b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073a2:	f7f9 fdbb 	bl	8000f1c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e086      	b.n	80074c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b4:	4b45      	ldr	r3, [pc, #276]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f0      	bne.n	80073a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073c0:	4b42      	ldr	r3, [pc, #264]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	493f      	ldr	r1, [pc, #252]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	3b01      	subs	r3, #1
 80073da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	025b      	lsls	r3, r3, #9
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	061b      	lsls	r3, r3, #24
 8007400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007404:	4931      	ldr	r1, [pc, #196]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007406:	4313      	orrs	r3, r2
 8007408:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800740a:	4b30      	ldr	r3, [pc, #192]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	492d      	ldr	r1, [pc, #180]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007418:	4313      	orrs	r3, r2
 800741a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800741c:	4b2b      	ldr	r3, [pc, #172]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	4928      	ldr	r1, [pc, #160]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800742e:	4b27      	ldr	r3, [pc, #156]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a26      	ldr	r2, [pc, #152]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800743a:	4b24      	ldr	r3, [pc, #144]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800743c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800743e:	4b24      	ldr	r3, [pc, #144]	@ (80074d0 <RCCEx_PLL3_Config+0x160>)
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	69d2      	ldr	r2, [r2, #28]
 8007446:	00d2      	lsls	r2, r2, #3
 8007448:	4920      	ldr	r1, [pc, #128]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800744e:	4b1f      	ldr	r3, [pc, #124]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	4a1e      	ldr	r2, [pc, #120]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007458:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007460:	4b1a      	ldr	r3, [pc, #104]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007466:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800746a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800746c:	e00f      	b.n	800748e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d106      	bne.n	8007482 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007474:	4b15      	ldr	r3, [pc, #84]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a14      	ldr	r2, [pc, #80]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 800747a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007480:	e005      	b.n	800748e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007482:	4b12      	ldr	r3, [pc, #72]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	4a11      	ldr	r2, [pc, #68]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800748e:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a0e      	ldr	r2, [pc, #56]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 8007494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749a:	f7f9 fd3f 	bl	8000f1c <HAL_GetTick>
 800749e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a0:	e008      	b.n	80074b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074a2:	f7f9 fd3b 	bl	8000f1c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e006      	b.n	80074c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <RCCEx_PLL3_Config+0x15c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	58024400 	.word	0x58024400
 80074d0:	ffff0007 	.word	0xffff0007

080074d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e042      	b.n	800756c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7f9 fbbb 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2224      	movs	r2, #36	@ 0x24
 8007502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fe1e 	bl	8008160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8b3 	bl	8007690 <UART_SetConfig>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e01b      	b.n	800756c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fe9d 	bl	80082a4 <UART_CheckIdleState>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08a      	sub	sp, #40	@ 0x28
 8007578:	af02      	add	r7, sp, #8
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758a:	2b20      	cmp	r3, #32
 800758c:	d17b      	bne.n	8007686 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_UART_Transmit+0x26>
 8007594:	88fb      	ldrh	r3, [r7, #6]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e074      	b.n	8007688 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2221      	movs	r2, #33	@ 0x21
 80075aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ae:	f7f9 fcb5 	bl	8000f1c <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	88fa      	ldrh	r2, [r7, #6]
 80075b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075cc:	d108      	bne.n	80075e0 <HAL_UART_Transmit+0x6c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	61bb      	str	r3, [r7, #24]
 80075de:	e003      	b.n	80075e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075e8:	e030      	b.n	800764c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2180      	movs	r1, #128	@ 0x80
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 feff 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e03d      	b.n	8007688 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10b      	bne.n	800762a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007620:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	3302      	adds	r3, #2
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	e007      	b.n	800763a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	3301      	adds	r3, #1
 8007638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1c8      	bne.n	80075ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2200      	movs	r2, #0
 8007660:	2140      	movs	r1, #64	@ 0x40
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fec8 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e006      	b.n	8007688 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3720      	adds	r7, #32
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007694:	b092      	sub	sp, #72	@ 0x48
 8007696:	af00      	add	r7, sp, #0
 8007698:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	431a      	orrs	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	4bbe      	ldr	r3, [pc, #760]	@ (80079b8 <UART_SetConfig+0x328>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4ab3      	ldr	r2, [pc, #716]	@ (80079bc <UART_SetConfig+0x32c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f8:	4313      	orrs	r3, r2
 80076fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	4baf      	ldr	r3, [pc, #700]	@ (80079c0 <UART_SetConfig+0x330>)
 8007704:	4013      	ands	r3, r2
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800770c:	430b      	orrs	r3, r1
 800770e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	f023 010f 	bic.w	r1, r3, #15
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4aa6      	ldr	r2, [pc, #664]	@ (80079c4 <UART_SetConfig+0x334>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d177      	bne.n	8007820 <UART_SetConfig+0x190>
 8007730:	4ba5      	ldr	r3, [pc, #660]	@ (80079c8 <UART_SetConfig+0x338>)
 8007732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007738:	2b28      	cmp	r3, #40	@ 0x28
 800773a:	d86d      	bhi.n	8007818 <UART_SetConfig+0x188>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <UART_SetConfig+0xb4>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	080077e9 	.word	0x080077e9
 8007748:	08007819 	.word	0x08007819
 800774c:	08007819 	.word	0x08007819
 8007750:	08007819 	.word	0x08007819
 8007754:	08007819 	.word	0x08007819
 8007758:	08007819 	.word	0x08007819
 800775c:	08007819 	.word	0x08007819
 8007760:	08007819 	.word	0x08007819
 8007764:	080077f1 	.word	0x080077f1
 8007768:	08007819 	.word	0x08007819
 800776c:	08007819 	.word	0x08007819
 8007770:	08007819 	.word	0x08007819
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	08007819 	.word	0x08007819
 8007784:	080077f9 	.word	0x080077f9
 8007788:	08007819 	.word	0x08007819
 800778c:	08007819 	.word	0x08007819
 8007790:	08007819 	.word	0x08007819
 8007794:	08007819 	.word	0x08007819
 8007798:	08007819 	.word	0x08007819
 800779c:	08007819 	.word	0x08007819
 80077a0:	08007819 	.word	0x08007819
 80077a4:	08007801 	.word	0x08007801
 80077a8:	08007819 	.word	0x08007819
 80077ac:	08007819 	.word	0x08007819
 80077b0:	08007819 	.word	0x08007819
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007819 	.word	0x08007819
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007819 	.word	0x08007819
 80077c4:	08007809 	.word	0x08007809
 80077c8:	08007819 	.word	0x08007819
 80077cc:	08007819 	.word	0x08007819
 80077d0:	08007819 	.word	0x08007819
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e222      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e21e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e21a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e216      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e212      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e20e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e20a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a69      	ldr	r2, [pc, #420]	@ (80079cc <UART_SetConfig+0x33c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x1fc>
 800782a:	4b67      	ldr	r3, [pc, #412]	@ (80079c8 <UART_SetConfig+0x338>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x1f4>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0x1ac>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e1ec      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e1e8      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e1e4      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e1e0      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e1dc      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800787c:	2340      	movs	r3, #64	@ 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e1d8      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e1d4      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a4f      	ldr	r2, [pc, #316]	@ (80079d0 <UART_SetConfig+0x340>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x268>
 8007896:	4b4c      	ldr	r3, [pc, #304]	@ (80079c8 <UART_SetConfig+0x338>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x260>
 80078a2:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <UART_SetConfig+0x218>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e1b6      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e1b2      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e1ae      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e1aa      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e1a6      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078e8:	2340      	movs	r3, #64	@ 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e1a2      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078f0:	2380      	movs	r3, #128	@ 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e19e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a35      	ldr	r2, [pc, #212]	@ (80079d4 <UART_SetConfig+0x344>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d130      	bne.n	8007964 <UART_SetConfig+0x2d4>
 8007902:	4b31      	ldr	r3, [pc, #196]	@ (80079c8 <UART_SetConfig+0x338>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d826      	bhi.n	800795c <UART_SetConfig+0x2cc>
 800790e:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <UART_SetConfig+0x284>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e180      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e17c      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e178      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e174      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e170      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007954:	2340      	movs	r3, #64	@ 0x40
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e16c      	b.n	8007c36 <UART_SetConfig+0x5a6>
 800795c:	2380      	movs	r3, #128	@ 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e168      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1b      	ldr	r2, [pc, #108]	@ (80079d8 <UART_SetConfig+0x348>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d142      	bne.n	80079f4 <UART_SetConfig+0x364>
 800796e:	4b16      	ldr	r3, [pc, #88]	@ (80079c8 <UART_SetConfig+0x338>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b05      	cmp	r3, #5
 8007978:	d838      	bhi.n	80079ec <UART_SetConfig+0x35c>
 800797a:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <UART_SetConfig+0x2f0>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007999 	.word	0x08007999
 8007984:	080079a1 	.word	0x080079a1
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079dd 	.word	0x080079dd
 8007994:	080079e5 	.word	0x080079e5
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e14a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e146      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e142      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e13e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079b8:	cfff69f3 	.word	0xcfff69f3
 80079bc:	58000c00 	.word	0x58000c00
 80079c0:	11fff4ff 	.word	0x11fff4ff
 80079c4:	40011000 	.word	0x40011000
 80079c8:	58024400 	.word	0x58024400
 80079cc:	40004400 	.word	0x40004400
 80079d0:	40004800 	.word	0x40004800
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40005000 	.word	0x40005000
 80079dc:	2320      	movs	r3, #32
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e128      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079e4:	2340      	movs	r3, #64	@ 0x40
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e124      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e120      	b.n	8007c36 <UART_SetConfig+0x5a6>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4acb      	ldr	r2, [pc, #812]	@ (8007d28 <UART_SetConfig+0x698>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d176      	bne.n	8007aec <UART_SetConfig+0x45c>
 80079fe:	4bcb      	ldr	r3, [pc, #812]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a06:	2b28      	cmp	r3, #40	@ 0x28
 8007a08:	d86c      	bhi.n	8007ae4 <UART_SetConfig+0x454>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0x380>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007ab5 	.word	0x08007ab5
 8007a14:	08007ae5 	.word	0x08007ae5
 8007a18:	08007ae5 	.word	0x08007ae5
 8007a1c:	08007ae5 	.word	0x08007ae5
 8007a20:	08007ae5 	.word	0x08007ae5
 8007a24:	08007ae5 	.word	0x08007ae5
 8007a28:	08007ae5 	.word	0x08007ae5
 8007a2c:	08007ae5 	.word	0x08007ae5
 8007a30:	08007abd 	.word	0x08007abd
 8007a34:	08007ae5 	.word	0x08007ae5
 8007a38:	08007ae5 	.word	0x08007ae5
 8007a3c:	08007ae5 	.word	0x08007ae5
 8007a40:	08007ae5 	.word	0x08007ae5
 8007a44:	08007ae5 	.word	0x08007ae5
 8007a48:	08007ae5 	.word	0x08007ae5
 8007a4c:	08007ae5 	.word	0x08007ae5
 8007a50:	08007ac5 	.word	0x08007ac5
 8007a54:	08007ae5 	.word	0x08007ae5
 8007a58:	08007ae5 	.word	0x08007ae5
 8007a5c:	08007ae5 	.word	0x08007ae5
 8007a60:	08007ae5 	.word	0x08007ae5
 8007a64:	08007ae5 	.word	0x08007ae5
 8007a68:	08007ae5 	.word	0x08007ae5
 8007a6c:	08007ae5 	.word	0x08007ae5
 8007a70:	08007acd 	.word	0x08007acd
 8007a74:	08007ae5 	.word	0x08007ae5
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007ae5 	.word	0x08007ae5
 8007a84:	08007ae5 	.word	0x08007ae5
 8007a88:	08007ae5 	.word	0x08007ae5
 8007a8c:	08007ae5 	.word	0x08007ae5
 8007a90:	08007ad5 	.word	0x08007ad5
 8007a94:	08007ae5 	.word	0x08007ae5
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007ae5 	.word	0x08007ae5
 8007aa0:	08007ae5 	.word	0x08007ae5
 8007aa4:	08007ae5 	.word	0x08007ae5
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ae5 	.word	0x08007ae5
 8007ab0:	08007add 	.word	0x08007add
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e0bc      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007abc:	2304      	movs	r3, #4
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e0b8      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e0b4      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e0b0      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e0ac      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007adc:	2340      	movs	r3, #64	@ 0x40
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e0a8      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e0a4      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a8f      	ldr	r2, [pc, #572]	@ (8007d30 <UART_SetConfig+0x6a0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d130      	bne.n	8007b58 <UART_SetConfig+0x4c8>
 8007af6:	4b8d      	ldr	r3, [pc, #564]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d826      	bhi.n	8007b50 <UART_SetConfig+0x4c0>
 8007b02:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x478>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b21 	.word	0x08007b21
 8007b0c:	08007b29 	.word	0x08007b29
 8007b10:	08007b31 	.word	0x08007b31
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e086      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e082      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e07e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e07a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b40:	2320      	movs	r3, #32
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e076      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b48:	2340      	movs	r3, #64	@ 0x40
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e072      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b50:	2380      	movs	r3, #128	@ 0x80
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e06e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a75      	ldr	r2, [pc, #468]	@ (8007d34 <UART_SetConfig+0x6a4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d130      	bne.n	8007bc4 <UART_SetConfig+0x534>
 8007b62:	4b72      	ldr	r3, [pc, #456]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d826      	bhi.n	8007bbc <UART_SetConfig+0x52c>
 8007b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b74 <UART_SetConfig+0x4e4>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b8d 	.word	0x08007b8d
 8007b78:	08007b95 	.word	0x08007b95
 8007b7c:	08007b9d 	.word	0x08007b9d
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e050      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b94:	2304      	movs	r3, #4
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e04c      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e048      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007ba4:	2310      	movs	r3, #16
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007baa:	e044      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007bac:	2320      	movs	r3, #32
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e040      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007bb4:	2340      	movs	r3, #64	@ 0x40
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e03c      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007bbc:	2380      	movs	r3, #128	@ 0x80
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e038      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8007d38 <UART_SetConfig+0x6a8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d130      	bne.n	8007c30 <UART_SetConfig+0x5a0>
 8007bce:	4b57      	ldr	r3, [pc, #348]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d826      	bhi.n	8007c28 <UART_SetConfig+0x598>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x550>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007c01 	.word	0x08007c01
 8007be8:	08007c09 	.word	0x08007c09
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c19 	.word	0x08007c19
 8007bf4:	08007c21 	.word	0x08007c21
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	e01a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c06:	e016      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0e:	e012      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c16:	e00e      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c18:	2320      	movs	r3, #32
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1e:	e00a      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c20:	2340      	movs	r3, #64	@ 0x40
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c26:	e006      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c28:	2380      	movs	r3, #128	@ 0x80
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	e002      	b.n	8007c36 <UART_SetConfig+0x5a6>
 8007c30:	2380      	movs	r3, #128	@ 0x80
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007d38 <UART_SetConfig+0x6a8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	f040 80f8 	bne.w	8007e32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	dc46      	bgt.n	8007cd8 <UART_SetConfig+0x648>
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	f2c0 8082 	blt.w	8007d54 <UART_SetConfig+0x6c4>
 8007c50:	3b02      	subs	r3, #2
 8007c52:	2b1e      	cmp	r3, #30
 8007c54:	d87e      	bhi.n	8007d54 <UART_SetConfig+0x6c4>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <UART_SetConfig+0x5cc>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007cdf 	.word	0x08007cdf
 8007c60:	08007d55 	.word	0x08007d55
 8007c64:	08007ce7 	.word	0x08007ce7
 8007c68:	08007d55 	.word	0x08007d55
 8007c6c:	08007d55 	.word	0x08007d55
 8007c70:	08007d55 	.word	0x08007d55
 8007c74:	08007cf7 	.word	0x08007cf7
 8007c78:	08007d55 	.word	0x08007d55
 8007c7c:	08007d55 	.word	0x08007d55
 8007c80:	08007d55 	.word	0x08007d55
 8007c84:	08007d55 	.word	0x08007d55
 8007c88:	08007d55 	.word	0x08007d55
 8007c8c:	08007d55 	.word	0x08007d55
 8007c90:	08007d55 	.word	0x08007d55
 8007c94:	08007d07 	.word	0x08007d07
 8007c98:	08007d55 	.word	0x08007d55
 8007c9c:	08007d55 	.word	0x08007d55
 8007ca0:	08007d55 	.word	0x08007d55
 8007ca4:	08007d55 	.word	0x08007d55
 8007ca8:	08007d55 	.word	0x08007d55
 8007cac:	08007d55 	.word	0x08007d55
 8007cb0:	08007d55 	.word	0x08007d55
 8007cb4:	08007d55 	.word	0x08007d55
 8007cb8:	08007d55 	.word	0x08007d55
 8007cbc:	08007d55 	.word	0x08007d55
 8007cc0:	08007d55 	.word	0x08007d55
 8007cc4:	08007d55 	.word	0x08007d55
 8007cc8:	08007d55 	.word	0x08007d55
 8007ccc:	08007d55 	.word	0x08007d55
 8007cd0:	08007d55 	.word	0x08007d55
 8007cd4:	08007d47 	.word	0x08007d47
 8007cd8:	2b40      	cmp	r3, #64	@ 0x40
 8007cda:	d037      	beq.n	8007d4c <UART_SetConfig+0x6bc>
 8007cdc:	e03a      	b.n	8007d54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007cde:	f7fe ffd7 	bl	8006c90 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ce2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e03c      	b.n	8007d60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe ffe6 	bl	8006cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e034      	b.n	8007d60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf6:	f107 0318 	add.w	r3, r7, #24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff f932 	bl	8006f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e02c      	b.n	8007d60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d06:	4b09      	ldr	r3, [pc, #36]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d12:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <UART_SetConfig+0x69c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	08db      	lsrs	r3, r3, #3
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	4a07      	ldr	r2, [pc, #28]	@ (8007d3c <UART_SetConfig+0x6ac>)
 8007d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d24:	e01c      	b.n	8007d60 <UART_SetConfig+0x6d0>
 8007d26:	bf00      	nop
 8007d28:	40011400 	.word	0x40011400
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	40007800 	.word	0x40007800
 8007d34:	40007c00 	.word	0x40007c00
 8007d38:	58000c00 	.word	0x58000c00
 8007d3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007d40:	4b9d      	ldr	r3, [pc, #628]	@ (8007fb8 <UART_SetConfig+0x928>)
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d44:	e00c      	b.n	8007d60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d46:	4b9d      	ldr	r3, [pc, #628]	@ (8007fbc <UART_SetConfig+0x92c>)
 8007d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d4a:	e009      	b.n	8007d60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d52:	e005      	b.n	8007d60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 81de 	beq.w	8008124 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	4a94      	ldr	r2, [pc, #592]	@ (8007fc0 <UART_SetConfig+0x930>)
 8007d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d7a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	4413      	add	r3, r2
 8007d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d305      	bcc.n	8007d98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d903      	bls.n	8007da0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d9e:	e1c1      	b.n	8008124 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da2:	2200      	movs	r2, #0
 8007da4:	60bb      	str	r3, [r7, #8]
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	4a84      	ldr	r2, [pc, #528]	@ (8007fc0 <UART_SetConfig+0x930>)
 8007dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2200      	movs	r2, #0
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dc2:	f7f8 fa91 	bl	80002e8 <__aeabi_uldivmod>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	020b      	lsls	r3, r1, #8
 8007dd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ddc:	0202      	lsls	r2, r0, #8
 8007dde:	6979      	ldr	r1, [r7, #20]
 8007de0:	6849      	ldr	r1, [r1, #4]
 8007de2:	0849      	lsrs	r1, r1, #1
 8007de4:	2000      	movs	r0, #0
 8007de6:	460c      	mov	r4, r1
 8007de8:	4605      	mov	r5, r0
 8007dea:	eb12 0804 	adds.w	r8, r2, r4
 8007dee:	eb43 0905 	adc.w	r9, r3, r5
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	469a      	mov	sl, r3
 8007dfa:	4693      	mov	fp, r2
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	f7f8 fa70 	bl	80002e8 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e16:	d308      	bcc.n	8007e2a <UART_SetConfig+0x79a>
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e1e:	d204      	bcs.n	8007e2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e26:	60da      	str	r2, [r3, #12]
 8007e28:	e17c      	b.n	8008124 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e30:	e178      	b.n	8008124 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e3a:	f040 80c5 	bne.w	8007fc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007e3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	dc48      	bgt.n	8007ed8 <UART_SetConfig+0x848>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	db7b      	blt.n	8007f42 <UART_SetConfig+0x8b2>
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d879      	bhi.n	8007f42 <UART_SetConfig+0x8b2>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <UART_SetConfig+0x7c4>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007edf 	.word	0x08007edf
 8007e58:	08007ee7 	.word	0x08007ee7
 8007e5c:	08007f43 	.word	0x08007f43
 8007e60:	08007f43 	.word	0x08007f43
 8007e64:	08007eef 	.word	0x08007eef
 8007e68:	08007f43 	.word	0x08007f43
 8007e6c:	08007f43 	.word	0x08007f43
 8007e70:	08007f43 	.word	0x08007f43
 8007e74:	08007eff 	.word	0x08007eff
 8007e78:	08007f43 	.word	0x08007f43
 8007e7c:	08007f43 	.word	0x08007f43
 8007e80:	08007f43 	.word	0x08007f43
 8007e84:	08007f43 	.word	0x08007f43
 8007e88:	08007f43 	.word	0x08007f43
 8007e8c:	08007f43 	.word	0x08007f43
 8007e90:	08007f43 	.word	0x08007f43
 8007e94:	08007f0f 	.word	0x08007f0f
 8007e98:	08007f43 	.word	0x08007f43
 8007e9c:	08007f43 	.word	0x08007f43
 8007ea0:	08007f43 	.word	0x08007f43
 8007ea4:	08007f43 	.word	0x08007f43
 8007ea8:	08007f43 	.word	0x08007f43
 8007eac:	08007f43 	.word	0x08007f43
 8007eb0:	08007f43 	.word	0x08007f43
 8007eb4:	08007f43 	.word	0x08007f43
 8007eb8:	08007f43 	.word	0x08007f43
 8007ebc:	08007f43 	.word	0x08007f43
 8007ec0:	08007f43 	.word	0x08007f43
 8007ec4:	08007f43 	.word	0x08007f43
 8007ec8:	08007f43 	.word	0x08007f43
 8007ecc:	08007f43 	.word	0x08007f43
 8007ed0:	08007f43 	.word	0x08007f43
 8007ed4:	08007f35 	.word	0x08007f35
 8007ed8:	2b40      	cmp	r3, #64	@ 0x40
 8007eda:	d02e      	beq.n	8007f3a <UART_SetConfig+0x8aa>
 8007edc:	e031      	b.n	8007f42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ede:	f7fd fc61 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8007ee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ee4:	e033      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ee6:	f7fd fc73 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8007eea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eec:	e02f      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fee2 	bl	8006cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efc:	e027      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efe:	f107 0318 	add.w	r3, r7, #24
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff f82e 	bl	8006f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f0c:	e01f      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <UART_SetConfig+0x934>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc4 <UART_SetConfig+0x934>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	08db      	lsrs	r3, r3, #3
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	4a24      	ldr	r2, [pc, #144]	@ (8007fb8 <UART_SetConfig+0x928>)
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f2c:	e00f      	b.n	8007f4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f2e:	4b22      	ldr	r3, [pc, #136]	@ (8007fb8 <UART_SetConfig+0x928>)
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	e00c      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f34:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <UART_SetConfig+0x92c>)
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f38:	e009      	b.n	8007f4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f40:	e005      	b.n	8007f4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80e7 	beq.w	8008124 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <UART_SetConfig+0x930>)
 8007f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f68:	005a      	lsls	r2, r3, #1
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	441a      	add	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7e:	2b0f      	cmp	r3, #15
 8007f80:	d916      	bls.n	8007fb0 <UART_SetConfig+0x920>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f88:	d212      	bcs.n	8007fb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f023 030f 	bic.w	r3, r3, #15
 8007f92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	e0b9      	b.n	8008124 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fb6:	e0b5      	b.n	8008124 <UART_SetConfig+0xa94>
 8007fb8:	03d09000 	.word	0x03d09000
 8007fbc:	003d0900 	.word	0x003d0900
 8007fc0:	080088d8 	.word	0x080088d8
 8007fc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	dc49      	bgt.n	8008064 <UART_SetConfig+0x9d4>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db7c      	blt.n	80080ce <UART_SetConfig+0xa3e>
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d87a      	bhi.n	80080ce <UART_SetConfig+0xa3e>
 8007fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <UART_SetConfig+0x950>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	0800806b 	.word	0x0800806b
 8007fe4:	08008073 	.word	0x08008073
 8007fe8:	080080cf 	.word	0x080080cf
 8007fec:	080080cf 	.word	0x080080cf
 8007ff0:	0800807b 	.word	0x0800807b
 8007ff4:	080080cf 	.word	0x080080cf
 8007ff8:	080080cf 	.word	0x080080cf
 8007ffc:	080080cf 	.word	0x080080cf
 8008000:	0800808b 	.word	0x0800808b
 8008004:	080080cf 	.word	0x080080cf
 8008008:	080080cf 	.word	0x080080cf
 800800c:	080080cf 	.word	0x080080cf
 8008010:	080080cf 	.word	0x080080cf
 8008014:	080080cf 	.word	0x080080cf
 8008018:	080080cf 	.word	0x080080cf
 800801c:	080080cf 	.word	0x080080cf
 8008020:	0800809b 	.word	0x0800809b
 8008024:	080080cf 	.word	0x080080cf
 8008028:	080080cf 	.word	0x080080cf
 800802c:	080080cf 	.word	0x080080cf
 8008030:	080080cf 	.word	0x080080cf
 8008034:	080080cf 	.word	0x080080cf
 8008038:	080080cf 	.word	0x080080cf
 800803c:	080080cf 	.word	0x080080cf
 8008040:	080080cf 	.word	0x080080cf
 8008044:	080080cf 	.word	0x080080cf
 8008048:	080080cf 	.word	0x080080cf
 800804c:	080080cf 	.word	0x080080cf
 8008050:	080080cf 	.word	0x080080cf
 8008054:	080080cf 	.word	0x080080cf
 8008058:	080080cf 	.word	0x080080cf
 800805c:	080080cf 	.word	0x080080cf
 8008060:	080080c1 	.word	0x080080c1
 8008064:	2b40      	cmp	r3, #64	@ 0x40
 8008066:	d02e      	beq.n	80080c6 <UART_SetConfig+0xa36>
 8008068:	e031      	b.n	80080ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806a:	f7fd fb9b 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 800806e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008070:	e033      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008072:	f7fd fbad 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8008076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008078:	e02f      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fe1c 	bl	8006cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e027      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808a:	f107 0318 	add.w	r3, r7, #24
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe ff68 	bl	8006f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008098:	e01f      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800809a:	4b2d      	ldr	r3, [pc, #180]	@ (8008150 <UART_SetConfig+0xac0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d009      	beq.n	80080ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008150 <UART_SetConfig+0xac0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	08db      	lsrs	r3, r3, #3
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <UART_SetConfig+0xac4>)
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080b8:	e00f      	b.n	80080da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80080ba:	4b26      	ldr	r3, [pc, #152]	@ (8008154 <UART_SetConfig+0xac4>)
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080be:	e00c      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080c0:	4b25      	ldr	r3, [pc, #148]	@ (8008158 <UART_SetConfig+0xac8>)
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c4:	e009      	b.n	80080da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080cc:	e005      	b.n	80080da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080d8:	bf00      	nop
    }

    if (pclk != 0U)
 80080da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d021      	beq.n	8008124 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	4a1d      	ldr	r2, [pc, #116]	@ (800815c <UART_SetConfig+0xacc>)
 80080e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	441a      	add	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008102:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	2b0f      	cmp	r3, #15
 8008108:	d909      	bls.n	800811e <UART_SetConfig+0xa8e>
 800810a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008110:	d205      	bcs.n	800811e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008114:	b29a      	uxth	r2, r3
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60da      	str	r2, [r3, #12]
 800811c:	e002      	b.n	8008124 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2201      	movs	r2, #1
 8008128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2201      	movs	r2, #1
 8008130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2200      	movs	r2, #0
 8008138:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2200      	movs	r2, #0
 800813e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008140:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008144:	4618      	mov	r0, r3
 8008146:	3748      	adds	r7, #72	@ 0x48
 8008148:	46bd      	mov	sp, r7
 800814a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814e:	bf00      	nop
 8008150:	58024400 	.word	0x58024400
 8008154:	03d09000 	.word	0x03d09000
 8008158:	003d0900 	.word	0x003d0900
 800815c:	080088d8 	.word	0x080088d8

08008160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01a      	beq.n	8008276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800825e:	d10a      	bne.n	8008276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	605a      	str	r2, [r3, #4]
  }
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b098      	sub	sp, #96	@ 0x60
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082b4:	f7f8 fe32 	bl	8000f1c <HAL_GetTick>
 80082b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d12f      	bne.n	8008328 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d0:	2200      	movs	r2, #0
 80082d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f88e 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d022      	beq.n	8008328 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008300:	647b      	str	r3, [r7, #68]	@ 0x44
 8008302:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800830e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e6      	bne.n	80082e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e063      	b.n	80083f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b04      	cmp	r3, #4
 8008334:	d149      	bne.n	80083ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008336:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800833e:	2200      	movs	r2, #0
 8008340:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f857 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d03c      	beq.n	80083ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	623b      	str	r3, [r7, #32]
   return(result);
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800836e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008370:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e6      	bne.n	8008350 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	60fb      	str	r3, [r7, #12]
   return(result);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083a2:	61fa      	str	r2, [r7, #28]
 80083a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	69b9      	ldr	r1, [r7, #24]
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	617b      	str	r3, [r7, #20]
   return(result);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e5      	bne.n	8008382 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e012      	b.n	80083f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3758      	adds	r7, #88	@ 0x58
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008408:	e04f      	b.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d04b      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008412:	f7f8 fd83 	bl	8000f1c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	429a      	cmp	r2, r3
 8008420:	d302      	bcc.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e04e      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0304 	and.w	r3, r3, #4
 8008436:	2b00      	cmp	r3, #0
 8008438:	d037      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b80      	cmp	r3, #128	@ 0x80
 800843e:	d034      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b40      	cmp	r3, #64	@ 0x40
 8008444:	d031      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	2b08      	cmp	r3, #8
 8008452:	d110      	bne.n	8008476 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2208      	movs	r2, #8
 800845a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f839 	bl	80084d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2208      	movs	r2, #8
 8008466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e029      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008484:	d111      	bne.n	80084aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800848e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f81f 	bl	80084d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e00f      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4013      	ands	r3, r2
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	bf0c      	ite	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	2300      	movne	r3, #0
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d0a0      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b095      	sub	sp, #84	@ 0x54
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	61fb      	str	r3, [r7, #28]
   return(result);
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	4b1e      	ldr	r3, [pc, #120]	@ (800859c <UART_EndRxTransfer+0xc8>)
 8008522:	4013      	ands	r3, r2
 8008524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800852e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008530:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008546:	2b01      	cmp	r3, #1
 8008548:	d118      	bne.n	800857c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60bb      	str	r3, [r7, #8]
   return(result);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	613b      	str	r3, [r7, #16]
   return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008590:	bf00      	nop
 8008592:	3754      	adds	r7, #84	@ 0x54
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	effffffe 	.word	0xeffffffe

080085a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e027      	b.n	8008606 <HAL_UARTEx_DisableFifoMode+0x66>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2224      	movs	r2, #36	@ 0x24
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008626:	2302      	movs	r3, #2
 8008628:	e02d      	b.n	8008686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2224      	movs	r2, #36	@ 0x24
 8008636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0201 	bic.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f850 	bl	800870c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e02d      	b.n	8008702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2224      	movs	r2, #36	@ 0x24
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f812 	bl	800870c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008718:	2b00      	cmp	r3, #0
 800871a:	d108      	bne.n	800872e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800872c:	e031      	b.n	8008792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800872e:	2310      	movs	r3, #16
 8008730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008732:	2310      	movs	r3, #16
 8008734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	0e5b      	lsrs	r3, r3, #25
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	0f5b      	lsrs	r3, r3, #29
 800874e:	b2db      	uxtb	r3, r3
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	7b3a      	ldrb	r2, [r7, #12]
 800875a:	4911      	ldr	r1, [pc, #68]	@ (80087a0 <UARTEx_SetNbDataToProcess+0x94>)
 800875c:	5c8a      	ldrb	r2, [r1, r2]
 800875e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008762:	7b3a      	ldrb	r2, [r7, #12]
 8008764:	490f      	ldr	r1, [pc, #60]	@ (80087a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008768:	fb93 f3f2 	sdiv	r3, r3, r2
 800876c:	b29a      	uxth	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	7b7a      	ldrb	r2, [r7, #13]
 8008778:	4909      	ldr	r1, [pc, #36]	@ (80087a0 <UARTEx_SetNbDataToProcess+0x94>)
 800877a:	5c8a      	ldrb	r2, [r1, r2]
 800877c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008780:	7b7a      	ldrb	r2, [r7, #13]
 8008782:	4908      	ldr	r1, [pc, #32]	@ (80087a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008786:	fb93 f3f2 	sdiv	r3, r3, r2
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	080088f0 	.word	0x080088f0
 80087a4:	080088f8 	.word	0x080088f8

080087a8 <memset>:
 80087a8:	4402      	add	r2, r0
 80087aa:	4603      	mov	r3, r0
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d100      	bne.n	80087b2 <memset+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	f803 1b01 	strb.w	r1, [r3], #1
 80087b6:	e7f9      	b.n	80087ac <memset+0x4>

080087b8 <__libc_init_array>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4d0d      	ldr	r5, [pc, #52]	@ (80087f0 <__libc_init_array+0x38>)
 80087bc:	4c0d      	ldr	r4, [pc, #52]	@ (80087f4 <__libc_init_array+0x3c>)
 80087be:	1b64      	subs	r4, r4, r5
 80087c0:	10a4      	asrs	r4, r4, #2
 80087c2:	2600      	movs	r6, #0
 80087c4:	42a6      	cmp	r6, r4
 80087c6:	d109      	bne.n	80087dc <__libc_init_array+0x24>
 80087c8:	4d0b      	ldr	r5, [pc, #44]	@ (80087f8 <__libc_init_array+0x40>)
 80087ca:	4c0c      	ldr	r4, [pc, #48]	@ (80087fc <__libc_init_array+0x44>)
 80087cc:	f000 f818 	bl	8008800 <_init>
 80087d0:	1b64      	subs	r4, r4, r5
 80087d2:	10a4      	asrs	r4, r4, #2
 80087d4:	2600      	movs	r6, #0
 80087d6:	42a6      	cmp	r6, r4
 80087d8:	d105      	bne.n	80087e6 <__libc_init_array+0x2e>
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e0:	4798      	blx	r3
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7ee      	b.n	80087c4 <__libc_init_array+0xc>
 80087e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ea:	4798      	blx	r3
 80087ec:	3601      	adds	r6, #1
 80087ee:	e7f2      	b.n	80087d6 <__libc_init_array+0x1e>
 80087f0:	08008908 	.word	0x08008908
 80087f4:	08008908 	.word	0x08008908
 80087f8:	08008908 	.word	0x08008908
 80087fc:	0800890c 	.word	0x0800890c

08008800 <_init>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	bf00      	nop
 8008804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008806:	bc08      	pop	{r3}
 8008808:	469e      	mov	lr, r3
 800880a:	4770      	bx	lr

0800880c <_fini>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr
